FIFO                            Source Listing                   9-MAY-2021 23:42:48  VSI C V7.4-002-50R2O              Page 1
V1.0                                                             2-FEB-2021 02:11:10  fifo.c;1

	      1 /*
	      2  ** THIS SOFTWARE IS SUBJECT TO COPYRIGHT PROTECTION AND IS OFFERED ONLY
	      3  ** PURSUANT TO THE 3DFX GLIDE GENERAL PUBLIC LICENSE. THERE IS NO RIGHT
	      4  ** TO USE THE GLIDE TRADEMARK WITHOUT PRIOR WRITTEN PERMISSION OF 3DFX
	      5  ** INTERACTIVE, INC. A COPY OF THIS LICENSE MAY BE OBTAINED FROM THE 
	      6  ** DISTRIBUTOR OR BY CONTACTING 3DFX INTERACTIVE INC(info@3dfx.com). 
	      7  ** THIS PROGRAM IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER 
	      8  ** EXPRESSED OR IMPLIED. SEE THE 3DFX GLIDE GENERAL PUBLIC LICENSE FOR A
	      9  ** FULL TEXT OF THE NON-WARRANTY PROVISIONS.  
	     10  ** 
	     11  ** USE, DUPLICATION OR DISCLOSURE BY THE GOVERNMENT IS SUBJECT TO
	     12  ** RESTRICTIONS AS SET FORTH IN SUBDIVISION (C)(1)(II) OF THE RIGHTS IN
	     13  ** TECHNICAL DATA AND COMPUTER SOFTWARE CLAUSE AT DFARS 252.227-7013,
	     14  ** AND/OR IN SIMILAR OR SUCCESSOR CLAUSES IN THE FAR, DOD OR NASA FAR
	     15  ** SUPPLEMENT. UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT LAWS OF
	     16  ** THE UNITED STATES.  
	     17  ** 
	     18  ** COPYRIGHT 3DFX INTERACTIVE, INC. 1999, ALL RIGHTS RESERVED
	     19  **
	     20  ** Revision 1.1.1.1.2.1  2005/04/23 18:23:46  koolsmoky
	     21  ** changes to support calling conventions in asm files
	     22  **
	     23  ** Revision 1.1.1.1  1999/12/07 21:49:08  joseph
	     24  ** Initial checkin into SourceForge.
	     25  **
	     26 ** 
	     27 ** 22    3/14/98 1:07p Peter
	     28 ** mac port happiness
	     29 ** 
	     30 ** 21    2/20/98 9:05a Peter
	     31 ** removed remnants of comdex grot
	     32 ** 
	     33 ** 20    2/11/98 5:22p Peter
	     34 ** added fifo get stuff for hanson
	     35 ** 
	     36 ** 19    2/01/98 7:44p Peter
	     37 ** parameter dumping level
	     38  * 
	     39  * 18    12/17/97 4:45p Peter
	     40  * groundwork for CrybabyGlide
	     41  * 
	     42  * 17    12/09/97 12:20p Peter
	     43  * mac glide port
	     44  * 
	     45  * 16    12/09/97 10:28a Peter
	     46  * cleaned up some frofanity
	     47  * 
	     48  * 15    12/05/97 4:26p Peter
	     49  * watcom warnings
	     50  * 
	     51  * 14    12/03/97 11:34a Peter
	     52  * dos debugging
	     53  * 
	     54  * 13    11/21/97 3:53p Peter
	     55  * reset messages are controlled by gdbg_level
	     56  * 
	     57  * 12    11/19/97 6:04p Peter

FIFO                            Source Listing                   9-MAY-2021 23:42:48  VSI C V7.4-002-50R2O              Page 2
V1.0                                                             2-FEB-2021 02:11:10  fifo.c;1

	     58  * actually exit if not reset
	     59  * 
	     60  * 11    11/18/97 4:36p Peter
	     61  * chipfield stuff cleanup and w/ direct writes
	     62  * 
	     63  * 10    11/17/97 4:55p Peter
	     64  * watcom warnings/chipfield stuff
	     65  * 
	     66  * 9     11/15/97 9:20p Peter
	     67  * I am the sorriest f*cker on the face of the planet
	     68  * 
	     69  **
	     70  */
	     71 
	     72 #include <stdio.h>
	   1683 #include <string.h>
	   2134 
       X   2135 #if defined(__WIN32__)
       X   2136 #include <windows.h>
       X   2137 #endif
	   2138 
	   2139 #include <3dfx.h>
	   2270 #include <glidesys.h>
	   2402 
	   2403 #define FX_DLL_DEFINITION
	   2404 #include <fxdll.h>
	   2525 #include <glide.h>
	   4336 #include "fxglide.h"
	  14618 
	  14619 
       X  14620 #if GDBG_INFO_ON
       X  14621 
       X  14622 static const char*
       X  14623 cvgRegNames[] = {
       X  14624   "status",                     /* 0x00 */
       X  14625   "intrCtrl",                   /* 0x01 */
       X  14626   "vAx",                        /* 0x02 */
       X  14627   "vAy",                        /* 0x03 */
       X  14628   "vBx",                        /* 0x04 */
       X  14629   "vBy",                        /* 0x05 */
       X  14630   "vCx",                        /* 0x06 */
       X  14631   "vCy",                        /* 0x07 */
       X  14632   "r",                          /* 0x08 */
       X  14633   "g",                          /* 0x09 */
       X  14634   "b",                          /* 0x0A */
       X  14635   "z",                          /* 0x0B */
       X  14636   "a",                          /* 0x0C */
       X  14637   "s",                          /* 0x0D */
       X  14638   "t",                          /* 0x0E */
       X  14639   "w",                          /* 0x0F */
       X  14640   "drdx",                       /* 0x10 */
       X  14641   "dgdx",                       /* 0x11 */
       X  14642   "dbdx",                       /* 0x12 */
       X  14643   "dzdx",                       /* 0x13 */
       X  14644   "dadx",                       /* 0x14 */
       X  14645   "dsdx",                       /* 0x15 */
       X  14646   "dtdx",                       /* 0x16 */

FIFO                            Source Listing                   9-MAY-2021 23:42:48  VSI C V7.4-002-50R2O              Page 3
V1.0                                                             2-FEB-2021 02:11:10  fifo.c;1

       X  14647   "dwdx",                       /* 0x17 */
       X  14648   "drdy",                       /* 0x18 */
       X  14649   "dgdy",                       /* 0x19 */
       X  14650   "dbdy",                       /* 0x1A */
       X  14651   "dzdy",                       /* 0x1B */
       X  14652   "dady",                       /* 0x1C */
       X  14653   "dsdy",                       /* 0x1D */
       X  14654   "dtdy",                       /* 0x1E */
       X  14655   "dwdy",                       /* 0x1F */
       X  14656   "triangleCMD",                /* 0x20 */
       X  14657   "reserved021",                /* 0x21 */
       X  14658   "FvAx",                       /* 0x22 */
       X  14659   "FvAy",                       /* 0x23 */
       X  14660   "FvBx",                       /* 0x24 */
       X  14661   "FvBy",                       /* 0x25 */
       X  14662   "FvCx",                       /* 0x26 */
       X  14663   "FvCy",                       /* 0x27 */
       X  14664   "Fr",                         /* 0x28 */
       X  14665   "Fg",                         /* 0x29 */
       X  14666   "Fb",                         /* 0x2A */
       X  14667   "Fz",                         /* 0x2B */
       X  14668   "Fa",                         /* 0x2C */
       X  14669   "Fs",                         /* 0x2D */
       X  14670   "Ft",                         /* 0x2E */
       X  14671   "Fw",                         /* 0x2F */
       X  14672   "Fdrdx",                      /* 0x30 */
       X  14673   "Fdgdx",                      /* 0x31 */
       X  14674   "Fdbdx",                      /* 0x32 */
       X  14675   "Fdzdx",                      /* 0x33 */
       X  14676   "Fdadx",                      /* 0x34 */
       X  14677   "Fdsdx",                      /* 0x35 */
       X  14678   "Fdtdx",                      /* 0x36 */
       X  14679   "Fdwdx",                      /* 0x37 */
       X  14680   "Fdrdy",                      /* 0x38 */
       X  14681   "Fdgdy",                      /* 0x39 */
       X  14682   "Fdbdy",                      /* 0x3A */
       X  14683   "Fdzdy",                      /* 0x3B */
       X  14684   "Fdady",                      /* 0x3C */
       X  14685   "Fdsdy",                      /* 0x3D */
       X  14686   "Fdtdy",                      /* 0x3E */
       X  14687   "Fdwdy",                      /* 0x3F */
       X  14688   "FtriangleCMD",               /* 0x40 */
       X  14689   "fbzColorPath",               /* 0x41 */
       X  14690   "fogMode",                    /* 0x42 */
       X  14691   "alphaMode",                  /* 0x43 */
       X  14692   "fbzMode",                    /* 0x44 */
       X  14693   "lfbMode",                    /* 0x45 */
       X  14694   "clipLeftRight",              /* 0x46 */
       X  14695   "clipLowYHighY",              /* 0x47 */
       X  14696   "nopCMD",                     /* 0x48 */
       X  14697   "fastfillCMD",                /* 0x49 */
       X  14698   "swapbufferCMD",              /* 0x4A */
       X  14699   "fogColor",                   /* 0x4B */
       X  14700   "zaColor",                    /* 0x4C */
       X  14701   "chromaKey",                  /* 0x4D */
       X  14702   "chromaRange",                /* 0x4E */
       X  14703   "userIntrCMD",                /* 0x4F */

FIFO                            Source Listing                   9-MAY-2021 23:42:48  VSI C V7.4-002-50R2O              Page 4
V1.0                                                             2-FEB-2021 02:11:10  fifo.c;1

       X  14704   "stipple",                    /* 0x50 */
       X  14705   "color0",                     /* 0x51 */
       X  14706   "color1",                     /* 0x52 */
       X  14707   "fbiPixelsIn",                /* 0x53 */
       X  14708   "fbiChromaFail",              /* 0x54 */
       X  14709   "fbiZfuncFail",               /* 0x55 */
       X  14710   "fbiAfuncFail",               /* 0x56 */
       X  14711   "fbiPixelsOut",               /* 0x57 */
       X  14712   "fogTable0001",               /* 0x58 */
       X  14713   "fogTable0203",               /* 0x59 */
       X  14714   "fogTable0405",               /* 0x5A */
       X  14715   "fogTable0607",               /* 0x5B */
       X  14716   "fogTable0809",               /* 0x5C */
       X  14717   "fogTable0A0B",               /* 0x5D */
       X  14718   "fogTable0C0D",               /* 0x5E */
       X  14719   "fogTable0E0F",               /* 0x5F */
       X  14720   "fogTable1011",               /* 0x60 */
       X  14721   "fogTable1213",               /* 0x61 */
       X  14722   "fogTable1415",               /* 0x62 */
       X  14723   "fogTable1617",               /* 0x63 */
       X  14724   "fogTable1819",               /* 0x64 */
       X  14725   "fogTable1A1B",               /* 0x65 */
       X  14726   "fogTable1C1D",               /* 0x66 */
       X  14727   "fogTable1E1F",               /* 0x67 */
       X  14728   "fogTable2021",               /* 0x68 */
       X  14729   "fogTable2223",               /* 0x69 */
       X  14730   "fogTable2425",               /* 0x6A */
       X  14731   "fogTable2627",               /* 0x6B */
       X  14732   "fogTable2829",               /* 0x6C */
       X  14733   "fogTable2A2B",               /* 0x6D */
       X  14734   "fogTable2C2D",               /* 0x6E */
       X  14735   "fogTable2E2F",               /* 0x6F */
       X  14736   "fogTable3031",               /* 0x70 */
       X  14737   "fogTable3233",               /* 0x71 */
       X  14738   "fogTable3435",               /* 0x72 */
       X  14739   "fogTable3637",               /* 0x73 */
       X  14740   "fogTable3839",               /* 0x74 */
       X  14741   "fogTable3A3B",               /* 0x75 */
       X  14742   "fogTable3C3D",               /* 0x76 */
       X  14743   "fogTable3E3F",               /* 0x77 */
       X  14744   "cmdFifoBaseAddr",            /* 0x78 */
       X  14745   "cmdFifoBump",                /* 0x79 */
       X  14746   "cmdFifoRdPtr",               /* 0x7A */
       X  14747   "cmdFifoAMin",                /* 0x7B */
       X  14748   "cmdFifoAMax",                /* 0x7C */
       X  14749   "cmdFifoDepth",               /* 0x7D */
       X  14750   "cmdFifoHoles",               /* 0x7E */
       X  14751   "reserved07F",                /* 0x7F */
       X  14752   "fbiInit4",                   /* 0x80 */
       X  14753   "vRetrace",                   /* 0x81 */
       X  14754   "backPorch",                  /* 0x82 */
       X  14755   "videoDim",                   /* 0x83 */
       X  14756   "fbiInit0",                   /* 0x84 */
       X  14757   "fbiInit1",                   /* 0x85 */
       X  14758   "fbiInit2",                   /* 0x86 */
       X  14759   "fbiInit3",                   /* 0x87 */
       X  14760   "hSync",                      /* 0x88 */

FIFO                            Source Listing                   9-MAY-2021 23:42:48  VSI C V7.4-002-50R2O              Page 5
V1.0                                                             2-FEB-2021 02:11:10  fifo.c;1

       X  14761   "vSync",                      /* 0x89 */
       X  14762   "clutData",                   /* 0x8A */
       X  14763   "dacData",                    /* 0x8B */
       X  14764   "maxRGBDelta",                /* 0x8C */
       X  14765   "hBorder",                    /* 0x8D */
       X  14766   "vBorder",                    /* 0x8E */
       X  14767   "borderColor",                /* 0x8F */
       X  14768   "hvRetrace",                  /* 0x90 */
       X  14769   "fbiInit5",                   /* 0x91 */
       X  14770   "fbiInit6",                   /* 0x92 */
       X  14771   "fbiInit7",                   /* 0x93 */
       X  14772   "reserved094",                /* 0x94 */
       X  14773   "reserved095",                /* 0x95 */
       X  14774   "fbiSwapHistory",             /* 0x96 */
       X  14775   "fbiTriOut",                  /* 0x97 */
       X  14776   "sSetupMode",                 /* 0x98 */
       X  14777   "sVx",                        /* 0x99 */
       X  14778   "sVy",                        /* 0x9A */
       X  14779   "sARGB",                      /* 0x9B */
       X  14780   "sRed",                       /* 0x9C */
       X  14781   "sGreen",                     /* 0x9D */
       X  14782   "sBlue",                      /* 0x9E */
       X  14783   "sAlpha",                     /* 0x9F */
       X  14784   "sVz",                        /* 0xA0 */
       X  14785   "sWb",                        /* 0xA1 */
       X  14786   "sWtmu0",                     /* 0xA2 */
       X  14787   "sS/W0",                      /* 0xA3 */
       X  14788   "sT/W0",                      /* 0xA4 */
       X  14789   "sWtmu1",                     /* 0xA5 */
       X  14790   "sS/Wtmu1",                   /* 0xA6 */
       X  14791   "sT/Wtmu1",                   /* 0xA7 */
       X  14792   "sDrawTriCMD",                /* 0xA8 */
       X  14793   "sBeginTriCMD",               /* 0xA9 */
       X  14794   "reserved0AA",                /* 0xAA */
       X  14795   "reserved0AB",                /* 0xAB */
       X  14796   "reserved0AC",                /* 0xAC */
       X  14797   "reserved0AD",                /* 0xAD */
       X  14798   "reserved0AE",                /* 0xAE */
       X  14799   "reserved0AF",                /* 0xAF */
       X  14800   "bltSrcBase",                 /* 0xB0 */
       X  14801   "bltDstBase",                 /* 0xB1 */
       X  14802   "bltXYStrides",               /* 0xB2 */
       X  14803   "bltSrcChroma",               /* 0xB3 */
       X  14804   "bltDstChroma",               /* 0xB4 */
       X  14805   "bltClipX",                   /* 0xB5 */
       X  14806   "bltClipY",                   /* 0xB6 */
       X  14807   "reserved067",                /* 0xB7 */
       X  14808   "bltSrcXY",                   /* 0xB8 */
       X  14809   "bltDstXY",                   /* 0xB9 */
       X  14810   "bltSize",                    /* 0xBA */
       X  14811   "bltRop",                     /* 0xBB */
       X  14812   "bltColor",                   /* 0xBC */
       X  14813   "reserved067",                /* 0xBD */
       X  14814   "bltCommand",                 /* 0xBE */
       X  14815   "bltData",                    /* 0xBF */
       X  14816   "textureMode",                /* 0xc0 */
       X  14817   "tLOD",                       /* 0xc1 */

FIFO                            Source Listing                   9-MAY-2021 23:42:48  VSI C V7.4-002-50R2O              Page 6
V1.0                                                             2-FEB-2021 02:11:10  fifo.c;1

       X  14818   "tDetail",                    /* 0xc2 */
       X  14819   "texBaseAddr",                /* 0xc3 */
       X  14820   "texBaseAddr1",               /* 0xc4 */
       X  14821   "texBaseAddr2",               /* 0xc5 */
       X  14822   "texBaseAddr38",              /* 0xc6 */
       X  14823   "trexInit0",                  /* 0xc7 */
       X  14824   "trexInit1",                  /* 0xc8 */
       X  14825   "nccTable0_0",                /* 0xc9 */
       X  14826   "nccTable0_1",                /* 0xca */
       X  14827   "nccTable0_2",                /* 0xcb */
       X  14828   "nccTable0_3",                /* 0xcc */
       X  14829   "nccTable0_4",                /* 0xcd */
       X  14830   "nccTable0_5",                /* 0xce */
       X  14831   "nccTable0_6",                /* 0xcf */
       X  14832   "nccTable0_7",                /* 0xd0 */
       X  14833   "nccTable0_8",                /* 0xd1 */
       X  14834   "nccTable0_9",                /* 0xd2 */
       X  14835   "nccTable0_A",                /* 0xd3 */
       X  14836   "nccTable0_B",                /* 0xd4 */
       X  14837   "nccTable1_0",                /* 0xd5 */
       X  14838   "nccTable1_1",                /* 0xd6 */
       X  14839   "nccTable1_2",                /* 0xd7 */
       X  14840   "nccTable1_3",                /* 0xd8 */
       X  14841   "nccTable1_4",                /* 0xd9 */
       X  14842   "nccTable1_5",                /* 0xda */
       X  14843   "nccTable1_6",                /* 0xdb */
       X  14844   "nccTable1_7",                /* 0xdc */
       X  14845   "nccTable1_8",                /* 0xdd */
       X  14846   "nccTable1_9",                /* 0xde */
       X  14847   "nccTable1_A",                /* 0xdf */
       X  14848   "nccTable1_B",                /* 0xe0 */
       X  14849   "reserved0E1",                /* 0xe1 */
       X  14850   "reserved0E2",                /* 0xe2 */
       X  14851   "reserved0E3",                /* 0xe3 */
       X  14852   "reserved0E4",                /* 0xe4 */
       X  14853   "reserved0E5",                /* 0xe5 */
       X  14854   "reserved0E6",                /* 0xe6 */
       X  14855   "reserved0E7",                /* 0xe7 */
       X  14856   "reserved0E8",                /* 0xe8 */
       X  14857   "reserved0E9",                /* 0xe9 */
       X  14858   "reserved0EA",                /* 0xea */
       X  14859   "reserved0EB",                /* 0xeb */
       X  14860   "reserved0EC",                /* 0xec */
       X  14861   "reserved0ED",                /* 0xed */
       X  14862   "reserved0EE",                /* 0xee */
       X  14863   "reserved0EF",                /* 0xef */
       X  14864   "reserved0F0",                /* 0xf0 */
       X  14865   "reserved0F1",                /* 0xf1 */
       X  14866   "reserved0F2",                /* 0xf2 */
       X  14867   "reserved0F3",                /* 0xf3 */
       X  14868   "reserved0F4",                /* 0xf4 */
       X  14869   "reserved0F5",                /* 0xf5 */
       X  14870   "reserved0F6",                /* 0xf6 */
       X  14871   "reserved0F7",                /* 0xf7 */
       X  14872   "reserved0F8",                /* 0xf8 */
       X  14873   "reserved0F9",                /* 0xf9 */
       X  14874   "reserved0FA",                /* 0xfa */

FIFO                            Source Listing                   9-MAY-2021 23:42:48  VSI C V7.4-002-50R2O              Page 7
V1.0                                                             2-FEB-2021 02:11:10  fifo.c;1

       X  14875   "reserved0FB",                /* 0xfb */
       X  14876   "reserved0FC",                /* 0xfc */
       X  14877   "reserved0FD",                /* 0xfd */
       X  14878   "reserved0FE",                /* 0xfe */
       X  14879   "reserved0FF",                /* 0xff */  
       X  14880 };
       X  14881 
       X  14882 #define GEN_INDEX(a) ((((FxU32) a) - ((FxU32) gc->reg_ptr)) >> 2)
       X  14883 
       X  14884 void
       X  14885 _grFifoWriteDebug(FxU32 addr, FxU32 val, FxU32 fifoPtr)
       X  14886 {
       X  14887   GR_DCL_GC;
       X  14888   FxU32 index = GEN_INDEX(addr);
       X  14889 
       X  14890   GDBG_INFO(gc->myLevel + 199, "Storing to FIFO:\n");
       X  14891   GDBG_INFO(gc->myLevel + 199, "  FIFO Ptr:    0x%x : 0x%X\n", fifoPtr, gc->cmdTransportInfo.fifoRoom);  
       X  14892   if (index <= 0xff) { 
       X  14893     GDBG_INFO(gc->myLevel + 199, "  Reg Name:    %s\n", cvgRegNames[index]);
       X  14894     GDBG_INFO(gc->myLevel + 199, "  Reg Num:     0x%X\n", index);
       X  14895   } else {
       X  14896     const char* strP;
       X  14897     const FxU32 offset = (addr - (FxU32)gc->reg_ptr);
       X  14898      
       X  14899     if (offset >= HW_TEXTURE_OFFSET) {
       X  14900       strP = "Texture";
       X  14901     } else if (offset >= HW_LFB_OFFSET) {
       X  14902       strP = "LFB";
       X  14903       index = addr;
       X  14904     } else if (offset >= HW_FIFO_OFFSET) {
       X  14905       strP = "Cmd FIFO";
       X  14906     } else {
       X  14907       strP = "Woah!";
       X  14908     }
       X  14909     GDBG_INFO(gc->myLevel + 199, "  %s Addr:    0x%X\n",
       X  14910               strP, index);
       X  14911   }
       X  14912   GDBG_INFO(gc->myLevel + 199, "  Value:       0x%X 0x%X\n", (index << 2), val);
       X  14913 
       X  14914   GDBG_INFO(120, "        SET(0x%X, %ld(0x%X)) 0 %s (0x%X)\n",
       X  14915             0x10000000UL + (FxU32)(index << 2), val, val, 
       X  14916             cvgRegNames[index & 0xFF], fifoPtr);
       X  14917 } /* _grFifoWriteDebug */
       X  14918 
       X  14919 void
       X  14920 _grFifoFWriteDebug(FxU32 addr, float val, FxU32 fifoPtr)
       X  14921 {
       X  14922   GR_DCL_GC;
       X  14923   FxU32 index = GEN_INDEX(addr);
       X  14924 
       X  14925   GDBG_INFO(gc->myLevel + 200, "Storing to FIFO:\n");
       X  14926   GDBG_INFO(gc->myLevel + 200, "  FIFO Ptr:    0x%x\n", fifoPtr);
       X  14927   if (index <= 0xff) {
       X  14928     GDBG_INFO(gc->myLevel + 200, "  Reg Name:    %s\n", cvgRegNames[index]);
       X  14929     GDBG_INFO(gc->myLevel + 200, "  Reg Num:     0x%x\n", index);
       X  14930   }
       X  14931   GDBG_INFO(gc->myLevel + 200, "  Value:       %4.2f\n", val);

FIFO                            Source Listing                   9-MAY-2021 23:42:48  VSI C V7.4-002-50R2O              Page 8
V1.0                                                             2-FEB-2021 02:11:10  fifo.c;1

       X  14932 
       X  14933   GDBG_INFO(120, "        SET(0x%X, %4.2f (0x%X)) 0 %s\n", 
       X  14934             0x10000000UL + (FxU32)(index << 2), val, *(const FxU32*)&val, 
       X  14935             cvgRegNames[index & 0xFF]);
       X  14936 } /* _grFifoFWriteDebug */
       X  14937 
       X  14938 extern void
       X  14939 _grCVGFifoDump_TriHdr(const FxU32 hdrVal)
       X  14940 {
       X  14941   GR_DCL_GC;
       X  14942 
       X  14943   /* Dump Packet Header */
       X  14944   GDBG_INFO(gc->myLevel + 200, "CMD Fifo Triangle Packet (0x%X)\n", hdrVal);
       X  14945   GDBG_INFO(gc->myLevel + 200, "  # Vertex: 0x%X\n", 
       X  14946             (hdrVal & SSTCP_PKT3_NUMVERTEX) >> SSTCP_PKT3_NUMVERTEX_SHIFT);
       X  14947   GDBG_INFO(gc->myLevel + 200, "  RGB: %s\n",
       X  14948             (hdrVal & SSTCP_PKT3_PACKEDCOLOR) ? "Packed" : "Separate");
       X  14949 
       X  14950   GDBG_INFO(gc->myLevel + 200, "  StripMode: %s\n",
       X  14951             (((hdrVal & (0x01 << 22)) == 0) ? "Strip" : "Fan"));
       X  14952 
       X  14953   GDBG_INFO(gc->myLevel + 200, "  Culling: %s\n",
       X  14954             (((hdrVal & (0x01 << 23)) == 0) ? "Disable" : "Enable"));
       X  14955 
       X  14956   GDBG_INFO(gc->myLevel + 200, "  CullingSign: %s\n",
       X  14957             (((hdrVal & (0x01 << 24)) == 0) ? "Positive" : "Negative"));
       X  14958 
       X  14959   GDBG_INFO(gc->myLevel + 200, "  PingPongSign: %s\n",
       X  14960             (((hdrVal & (0x01 << 25)) == 0) ? "Normal" : "Disable"));
       X  14961   
       X  14962   if (GDBG_GET_DEBUGLEVEL(gc->myLevel + 200)) {
       X  14963     const FxU32 temp = (hdrVal & SSTCP_PKT3_PMASK);
       X  14964     int i;
       X  14965 
       X  14966     GDBG_INFO(gc->myLevel + 200, "  Params: X Y");
       X  14967 
       X  14968     for(i = 10; i <= 17; i++) {
       X  14969       static const char* paramSel[] = { "RGB", "Alpha", "Z", "Wb", "W0", "ST[0]", "W1", "ST[1]" };
       X  14970       
       X  14971       if ((temp & (0x01UL << i)) != 0) GDBG_PRINTF("%s ", paramSel[i - 10]);
       X  14972     }
       X  14973     GDBG_INFO(gc->myLevel + 200, "\n");
       X  14974   }
       X  14975 
       X  14976   {
       X  14977     const FxU32 temp = (hdrVal & SSTCP_PKT3_CMD) >> SSTCP_PKT3_CMD_SHIFT;
       X  14978     const char* tempStr;
       X  14979 
       X  14980     switch(temp) {
       X  14981     case 0x00: tempStr = "Independent";   break;
       X  14982     case 0x01: tempStr = "NewStrip";      break;
       X  14983     case 0x02: tempStr = "ContinueStrip"; break;
       X  14984     default:   tempStr = "Reserved";      break;
       X  14985     }
       X  14986     GDBG_INFO(gc->myLevel + 200, "  Command: 0x%X(%s)\n", temp, tempStr);
       X  14987   }
       X  14988 }

FIFO                            Source Listing                   9-MAY-2021 23:42:48  VSI C V7.4-002-50R2O              Page 9
V1.0                                                             2-FEB-2021 02:11:10  fifo.c;1

       X  14989 
       X  14990 extern void
       X  14991 _grCVGFifoDump_Linear(const FxU32* const linearPacketAddr)
       X  14992 {
       X  14993 
       X  14994 }
       X  14995 
       X  14996 void
       X  14997 _grErrorCallback(const char* const procName,
       X  14998                  const char* const format,
       X  14999                  va_list           args)
       X  15000 {
       X  15001   static FxBool inProcP = FXFALSE;
       X  15002 
       X  15003   if (!inProcP) {
       X  15004     static char errMsgBuf[1024];
       X  15005     
       X  15006     inProcP = FXTRUE;
       X  15007     {
       X  15008       extern void (*GrErrorCallback)( const char *string, FxBool fatal );
       X  15009 
       X  15010       vsprintf(errMsgBuf, format, args);
       X  15011       (*GrErrorCallback)(errMsgBuf, (GETENV("FX_ERROR_FAIL") != NULL));
       X  15012     }
       X  15013     inProcP = FXFALSE;
       X  15014   }
       X  15015 }
       X  15016 
       X  15017 #endif /* GDBG_INFO_ON */
	  15018 
       X  15019 #if USE_PACKET_FIFO
       X  15020 
       X  15021 /* Routines privately exported so that the manufacturing diags
       X  15022  * and other things can do register writes etc w/o having access
       X  15023  * to the glide internals etc.
       X  15024  */
       X  15025 extern void
       X  15026 _grSet32(volatile FxU32* const sstAddr, const FxU32 val)
       X  15027 {
       X  15028 #define FN_NAME "_grSet32"
       X  15029   GR_DCL_GC;
       X  15030 
       X  15031   GR_ASSERT(sstAddr >= gc->base_ptr);
       X  15032   GR_ASSERT(sstAddr <  &SST_TMU(gc->reg_ptr, GR_TMU0)->status);
       X  15033 
       X  15034   GR_SET_EXPECTED_SIZE(sizeof(FxU32), 1);
       X  15035   GR_SET_INDEX(BROADCAST_ID, gc->reg_ptr, (sstAddr - gc->reg_ptr), val);
       X  15036   GR_CHECK_SIZE();
       X  15037 #undef FN_NAME
       X  15038 }
       X  15039 
       X  15040 extern FxU32
       X  15041 _grGet32(volatile FxU32* const sstAddr)
       X  15042 {
       X  15043   return GR_GET(*sstAddr); 
       X  15044 }
       X  15045 

FIFO                            Source Listing                   9-MAY-2021 23:42:48  VSI C V7.4-002-50R2O              Page 10
V1.0                                                             2-FEB-2021 02:11:10  fifo.c;1

       X  15046 #if FIFO_ASSERT_FULL
       X  15047 const FxU32 kFifoCheckMask = 0xFFFF;
       X  15048 FxU32 gFifoCheckCount = 0;
       X  15049 #endif
       X  15050 
       X  15051 void FX_CALL
       X  15052 _FifoMakeRoom(const FxI32 blockSize, const char* fName, const int fLine)
       X  15053 {
       X  15054 #define FN_NAME "_FifoMakeRoom"
       X  15055   FxU32 wrapAddr = 0x00UL;
       X  15056   GR_BEGIN_NOFIFOCHECK(FN_NAME, 400);
       X  15057 
       X  15058   GR_ASSERT(blockSize > 0);
       X  15059   GR_ASSERT((FxU32)blockSize < gc->cmdTransportInfo.fifoSize);
       X  15060   FIFO_ASSERT();
       X  15061 
       X  15062   /* Update the roomToXXX values w/ the # of writes since the last
       X  15063    * fifo stall/wrap.  
       X  15064    */
       X  15065   {
       X  15066     const FxI32 writes = (MIN(gc->cmdTransportInfo.roomToReadPtr, gc->cmdTransportInfo.roomToEnd) -
       X  15067                           gc->cmdTransportInfo.fifoRoom);
       X  15068     
       X  15069     gc->cmdTransportInfo.roomToReadPtr   -= writes;
       X  15070     gc->cmdTransportInfo.roomToEnd       -= writes;
       X  15071 
       X  15072 #if GDBG_INFO_ON
       X  15073     GDBG_INFO_MORE(gc->myLevel, ": (%s : %d)\n"
       X  15074                    "\tfifoBlock: (0x%X : 0x%X)\n"
       X  15075                    "\tfifoRoom: (0x%X : 0x%X) : (0x%X : 0x%X)\n"
       X  15076                    "\tfifo hw: (0x%X : 0x%X)\n",
       X  15077                    ((fName == NULL) ? "Unknown" : fName), fLine,
       X  15078                    (FxU32)gc->cmdTransportInfo.fifoPtr, blockSize,
       X  15079                    gc->cmdTransportInfo.roomToReadPtr, gc->cmdTransportInfo.roomToEnd, 
       X  15080                    gc->cmdTransportInfo.fifoRoom, writes,
       X  15081                    HW_FIFO_PTR(FXTRUE), gc->cmdTransportInfo.fifoRead);
       X  15082 
       X  15083 #if !GLIDE_INIT_HAL
       X  15084     if (gc->scanline_interleaved) {
       X  15085       SstRegs* slaveHw = (SstRegs*)gc->slave_ptr;
       X  15086 
       X  15087       GDBG_INFO_MORE(gc->myLevel, "\tsli: 0x%X : (0x%X : 0x%X : 0x%X)\n",
       X  15088                      HW_FIFO_PTR(FXFALSE), 
       X  15089                      GR_GET(slaveHw->cmdFifoDepth), 
       X  15090                      GR_GET(slaveHw->cmdFifoHoles), 
       X  15091                      GR_GET(slaveHw->status));
       X  15092     }
       X  15093 #endif /* !GLIDE_INIT_HAL */
       X  15094 #endif /* GDBG_INFO_ON */
       X  15095 
       X  15096     ASSERT_FAULT_IMMED((gc->cmdTransportInfo.roomToReadPtr >= 0) && 
       X  15097                        (gc->cmdTransportInfo.roomToEnd >= 0));
       X  15098   }
       X  15099 
       X  15100 again:
       X  15101   /* do we need to stall? */
       X  15102   {

FIFO                            Source Listing                   9-MAY-2021 23:42:48  VSI C V7.4-002-50R2O              Page 11
V1.0                                                             2-FEB-2021 02:11:10  fifo.c;1

       X  15103     FxU32 lastHwRead = gc->cmdTransportInfo.fifoRead;
       X  15104     FxI32 roomToReadPtr = gc->cmdTransportInfo.roomToReadPtr;
       X  15105 
       X  15106     while (roomToReadPtr < blockSize) {
       X  15107       FxU32 curReadPtr = HW_FIFO_PTR(FXTRUE);
       X  15108       FxU32 curReadDist = curReadPtr - lastHwRead;
       X  15109 
       X  15110       GR_ASSERT((curReadPtr >= (FxU32)gc->cmdTransportInfo.fifoStart) &&
       X  15111                 (curReadPtr < (FxU32)gc->cmdTransportInfo.fifoEnd));
       X  15112 
       X  15113 #if !GLIDE_INIT_HAL
       X  15114       /* If we're in an sli configuration then we need to make sure
       X  15115        * that we don't catch up to either the slave as well.
       X  15116        */
       X  15117       if (gc->scanline_interleaved) {
       X  15118         const FxU32 slaveReadPtr = HW_FIFO_PTR(FXFALSE);
       X  15119         const FxU32 slaveReadDist = (slaveReadPtr - lastHwRead);
       X  15120         FxI32 distSlave = (FxI32)slaveReadDist;
       X  15121         FxI32 distMaster = (FxI32)curReadDist;
       X  15122 
       X  15123         GR_ASSERT((slaveReadPtr >= (FxU32)gc->cmdTransportInfo.fifoStart) &&
       X  15124                   (slaveReadPtr < (FxU32)gc->cmdTransportInfo.fifoEnd));
       X  15125 
       X  15126         /* Get the actual absolute distance to the respective fifo ptrs */
       X  15127         if (distSlave < 0) distSlave += (FxI32)gc->cmdTransportInfo.fifoSize - FIFO_END_ADJUST;
       X  15128         if (distMaster < 0) distMaster += (FxI32)gc->cmdTransportInfo.fifoSize - FIFO_END_ADJUST;
       X  15129 
       X  15130         /* Is the slave closer than the master? */
       X  15131         if (distSlave < distMaster) {
       X  15132 #if GDBG_INFO_ON  
       X  15133           {
       X  15134             SstRegs* slaveHw = (SstRegs*)gc->slave_ptr; 
       X  15135             GDBG_INFO(gc->myLevel, "  Wait sli: 0x%X : (0x%X : 0x%X : 0x%X)\n"
       X  15136                       "\tMaster: 0x%X : 0x%X\n"
       X  15137                       "\tSlave : 0x%X : 0x%X\n",
       X  15138                       HW_FIFO_PTR(FXFALSE), 
       X  15139                       GR_GET(slaveHw->cmdFifoDepth), 
       X  15140                       GR_GET(slaveHw->cmdFifoHoles), 
       X  15141                       GR_GET(slaveHw->status),
       X  15142                       curReadPtr, curReadDist,
       X  15143                       slaveReadPtr, slaveReadDist);
       X  15144           }
       X  15145 #endif /* GDBG_INFO_ON */
       X  15146 
       X  15147           curReadDist = slaveReadDist;
       X  15148           curReadPtr = slaveReadPtr;
       X  15149         }
       X  15150       }
       X  15151 #endif /* !GLIDE_INIT_HAL */
       X  15152 
       X  15153       roomToReadPtr += curReadDist;
       X  15154 
       X  15155 #if (GLIDE_PLATFORM & GLIDE_HW_CVG) && GLIDE_USE_DEBUG_FIFO
       X  15156       _GlideRoot.stats.fifoStalls++;
       X  15157       _GlideRoot.stats.fifoStallDepth += GR_GET(hw->cmdFifoDepth);
       X  15158 #endif
       X  15159       /* Have we wrapped yet? */

FIFO                            Source Listing                   9-MAY-2021 23:42:48  VSI C V7.4-002-50R2O              Page 12
V1.0                                                             2-FEB-2021 02:11:10  fifo.c;1

       X  15160       if (lastHwRead > curReadPtr) roomToReadPtr += (FxI32)gc->cmdTransportInfo.fifoSize - FIFO_END_ADJUST;
       X  15161       lastHwRead = curReadPtr;
       X  15162     }
       X  15163 
       X  15164     GR_ASSERT((lastHwRead >= (FxU32)gc->cmdTransportInfo.fifoStart) &&
       X  15165               (lastHwRead < (FxU32)gc->cmdTransportInfo.fifoEnd));
       X  15166 
       X  15167     /* Update cached copies */
       X  15168     gc->cmdTransportInfo.fifoRead = lastHwRead;
       X  15169     gc->cmdTransportInfo.roomToReadPtr = roomToReadPtr;
       X  15170 
       X  15171     GDBG_INFO(gc->myLevel, "  Wait: (0x%X : 0x%X) : 0x%X\n", 
       X  15172               gc->cmdTransportInfo.roomToReadPtr, gc->cmdTransportInfo.roomToEnd,
       X  15173               gc->cmdTransportInfo.fifoRead);
       X  15174   }
       X  15175   
       X  15176   /* Do we need to wrap to front? */
       X  15177   if (gc->cmdTransportInfo.roomToEnd <= blockSize) {
       X  15178     GDBG_INFO(gc->myLevel + 10, "  Pre-Wrap: (0x%X : 0x%X) : 0x%X\n", 
       X  15179               gc->cmdTransportInfo.roomToReadPtr, gc->cmdTransportInfo.roomToEnd,
       X  15180               gc->cmdTransportInfo.fifoRead);
       X  15181 
       X  15182     /* Set the jsr packet. 
       X  15183      * NB: This command must be fenced.
       X  15184      */
       X  15185     FIFO_ASSERT();
       X  15186     {
       X  15187       SET(*gc->cmdTransportInfo.fifoPtr, gc->cmdTransportInfo.fifoJmpHdr);
       X  15188       P6FENCE;
       X  15189     }
       X  15190     FIFO_ASSERT();
       X  15191     
       X  15192     wrapAddr = (FxU32)gc->cmdTransportInfo.fifoPtr;
       X  15193 
       X  15194     /* Update roomXXX fields for the actual wrap */
       X  15195     gc->cmdTransportInfo.roomToReadPtr -= gc->cmdTransportInfo.roomToEnd;
       X  15196     gc->cmdTransportInfo.roomToEnd = gc->cmdTransportInfo.fifoSize - FIFO_END_ADJUST;
       X  15197 
       X  15198 #if (GLIDE_PLATFORM & GLIDE_HW_CVG) && GLIDE_USE_DEBUG_FIFO
       X  15199     _GlideRoot.stats.fifoWraps++;
       X  15200     _GlideRoot.stats.fifoWrapDepth += GR_GET(hw->cmdFifoDepth);
       X  15201 #endif
       X  15202 
       X  15203     /* Reset fifo ptr to start */ 
       X  15204     gc->cmdTransportInfo.fifoPtr = gc->cmdTransportInfo.fifoStart;
       X  15205 
       X  15206 #if GLIDE_USE_SHADOW_FIFO
       X  15207     {
       X  15208       FxU32* fifoPtr = gc->cmdTransportInfo.fifoShadowPtr;
       X  15209 
       X  15210       while(fifoPtr < gc->cmdTransportInfo.fifoShadowBase + (kDebugFifoSize >> 2)) 
       X  15211         *fifoPtr++ = 0x00UL;
       X  15212       gc->cmdTransportInfo.fifoShadowPtr = gc->cmdTransportInfo.fifoShadowBase;
       X  15213     }
       X  15214 #endif /* GLIDE_USE_SHADOW_FIFO */
       X  15215 
       X  15216     GDBG_INFO(gc->myLevel + 10, "  Post-Wrap: (0x%X : 0x%X) : 0x%X\n", 

FIFO                            Source Listing                   9-MAY-2021 23:42:48  VSI C V7.4-002-50R2O              Page 13
V1.0                                                             2-FEB-2021 02:11:10  fifo.c;1

       X  15217               gc->cmdTransportInfo.roomToReadPtr, gc->cmdTransportInfo.roomToEnd,
       X  15218               gc->cmdTransportInfo.fifoRead);
       X  15219 
       X  15220     goto again;
       X  15221   }
       X  15222   
       X  15223   /* compute room left */
       X  15224   gc->cmdTransportInfo.fifoRoom = MIN(gc->cmdTransportInfo.roomToReadPtr, gc->cmdTransportInfo.roomToEnd);
       X  15225 
       X  15226 #if GDBG_INFO_ON  
       X  15227 #if (GLIDE_PLATFORM & GLIDE_HW_CVG)
       X  15228   GDBG_INFO(gc->myLevel, FN_NAME"_Done:\n"
       X  15229             "\tfifoBlock: (0x%X : 0x%X)\n"
       X  15230             "\tfifoRoom: (0x%X : 0x%X : 0x%X)\n"
       X  15231             "\tfifo hw: (0x%X : 0x%X) : (0x%X : 0x%X : 0x%X)\n",
       X  15232             (FxU32)gc->cmdTransportInfo.fifoPtr, blockSize,
       X  15233             gc->cmdTransportInfo.roomToReadPtr, 
       X  15234             gc->cmdTransportInfo.roomToEnd, gc->cmdTransportInfo.fifoRoom,
       X  15235             HW_FIFO_PTR(FXTRUE), gc->cmdTransportInfo.fifoRead, 
       X  15236             GR_GET(hw->cmdFifoDepth), GR_GET(hw->cmdFifoHoles), GR_GET(hw->status));
       X  15237 #endif
       X  15238 
       X  15239 #if !GLIDE_INIT_HAL
       X  15240   if (gc->scanline_interleaved) {
       X  15241     SstRegs* slaveHw = (SstRegs*)gc->slave_ptr;
       X  15242     
       X  15243     GDBG_INFO_MORE(gc->myLevel, "\tsli: 0x%X : (0x%X : 0x%X : 0x%X)\n",
       X  15244                    HW_FIFO_PTR(FXFALSE), 
       X  15245                    GR_GET(slaveHw->cmdFifoDepth), 
       X  15246                    GR_GET(slaveHw->cmdFifoHoles), 
       X  15247                    GR_GET(slaveHw->status));
       X  15248   }
       X  15249 #endif /* !GLIDE_INIT_HAL */
       X  15250 #endif /* GDBG_INFO_ON */
       X  15251   
       X  15252   FIFO_ASSERT();
       X  15253   GR_TRACE_EXIT(FN_NAME);
       X  15254 #undef FN_NAME
       X  15255 }
       X  15256 
       X  15257 extern void
       X  15258 _grGetCommandTransportInfo(GrCmdTransportInfo* info)
       X  15259 {
       X  15260   GR_DCL_GC;
       X  15261 
       X  15262   GR_ASSERT(info != NULL);
       X  15263   *info = gc->cmdTransportInfo;
       X  15264 }
       X  15265 
       X  15266 #endif /* USE_PACKET_FIFO */

FIFO                            Source Listing                   9-MAY-2021 23:42:48  VSI C V7.4-002-50R2O              Page 14
V1.0                                                             2-FEB-2021 02:11:10  fifo.c;1

Command Line
------- ----

CC/DEBUG/NOOP/LIST=[.OUT.DEBUG.OBJ.GLIDE.GLIDE2X.CVG.GLIDE.SRC]FIFO/OBJECT=[.OU
T.DEBUG.OBJ.GLIDE.GLIDE2X.CVG.GLIDE.SRC]FIFO.OBJ/INCLUDE_DIRECTORY=([.GLIDE.SWL
IBS.FXMISC],[.GLIDE.GLIDE2X.CVG.INCSRC],[.GLIDE.GLIDE2X.CVG.GLIDE.SRC],[.GLIDE.
GLIDE2X.CVG.INIT],[.GLIDE.SWLIBS.NEWPCI.PCILIB])/DEFINE=(CVG,GLIDE_USE_C_TRISET
UP,GLIDE_HW_TRI_SETUP=1,GLIDE_TRI_CULLING=1,GLIDE_DEFAULT_GAMMA=1.3F,GLIDE_LIB=
1) [.GLIDE.GLIDE2X.CVG.GLIDE.SRC]FIFO.C

Hardware: /ARCHITECTURE=GENERIC /OPTIMIZE=TUNE=GENERIC

These macros are in effect at the start of the compilation.
----- ------ --- -- ------ -- --- ----- -- --- ------------

 __G_FLOAT=1  __DECC=1  vms=1  VMS=1  __32BITS=1  __PRAGMA_ENVIRONMENT=1 
 __CRTL_VER=80400000  __vms_version="V8.4-2L1"  CC$gfloat=1  __X_FLOAT=1 
 GLIDE_HW_TRI_SETUP=1  GLIDE_USE_C_TRISETUP=1  vms_version="V8.4-2L1" 
 __DATE__="May  9 2021"  __STDC_VERSION__=199901L  __DECC_MODE_RELAXED=1 
 __DECC_VER=70490002  __VMS=1  GLIDE_DEFAULT_GAMMA=1.3F  GLIDE_LIB=1 
 __ALPHA=1  VMS_VERSION="V8.4-2L1"  __IEEE_FLOAT=0  __VMS_VERSION="V8.4-2L1" 
 __TIME__="23:42:49"  __Alpha_AXP=1  __VMS_VER=80421222 
 __BIASED_FLT_ROUNDS=2  CVG=1  __INITIAL_POINTER_SIZE=0  __STDC__=2 
 __LANGUAGE_C__=1  __vms=1  __alpha=1  __D_FLOAT=0  GLIDE_TRI_CULLING=1 

