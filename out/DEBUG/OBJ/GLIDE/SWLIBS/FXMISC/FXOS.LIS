FXOS                            Source Listing                   9-MAY-2021 23:43:27  VSI C V7.4-002-50R2O              Page 1
V1.0                                                             8-MAY-2021 20:01:26  fxos.c;3

	      1 /*
	      2 ** THIS SOFTWARE IS SUBJECT TO COPYRIGHT PROTECTION AND IS OFFERED ONLY
	      3 ** PURSUANT TO THE 3DFX GLIDE GENERAL PUBLIC LICENSE. THERE IS NO RIGHT
	      4 ** TO USE THE GLIDE TRADEMARK WITHOUT PRIOR WRITTEN PERMISSION OF 3DFX
	      5 ** INTERACTIVE, INC. A COPY OF THIS LICENSE MAY BE OBTAINED FROM THE 
	      6 ** DISTRIBUTOR OR BY CONTACTING 3DFX INTERACTIVE INC(info@3dfx.com). 
	      7 ** THIS PROGRAM IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER 
	      8 ** EXPRESSED OR IMPLIED. SEE THE 3DFX GLIDE GENERAL PUBLIC LICENSE FOR A
	      9 ** FULL TEXT OF THE NON-WARRANTY PROVISIONS.  
	     10 ** 
	     11 ** USE, DUPLICATION OR DISCLOSURE BY THE GOVERNMENT IS SUBJECT TO
	     12 ** RESTRICTIONS AS SET FORTH IN SUBDIVISION (C)(1)(II) OF THE RIGHTS IN
	     13 ** TECHNICAL DATA AND COMPUTER SOFTWARE CLAUSE AT DFARS 252.227-7013,
	     14 ** AND/OR IN SIMILAR OR SUCCESSOR CLAUSES IN THE FAR, DOD OR NASA FAR
	     15 ** SUPPLEMENT. UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT LAWS OF
	     16 ** THE UNITED STATES.  
	     17 ** 
	     18 ** COPYRIGHT 3DFX INTERACTIVE, INC. 1999, ALL RIGHTS RESERVED
	     19 */
	     20 
	     21 #include <stdio.h>
	   1632 #include <stdlib.h>
	   3727 #include <string.h>
	   4178 
       X   4179 #ifdef WIN32
       X   4180 #include <windows.h>
       X   4181 #include <fxos.h>
       X   4182 
       X   4183 void sleep(int secs)
       X   4184 {
       X   4185     GdiFlush();
       X   4186     Sleep(secs * 1000);
       X   4187 }
       X   4188 
       X   4189 int fxGethostname(char *name, unsigned long n)
       X   4190 {
       X   4191     return (int) GetComputerNameA((LPTSTR)name, &n);
       X   4192 }
       X   4193 #else
	   4194 #include <fxos.h>
	   4243 #endif
	   4244 
	   4245 #if !macintosh && !defined(__FreeBSD__)
	   4246 /* return current time in seconds (floating point)      */
       X   4247 #if defined ( __sparc__ ) || defined ( __DJGPP__ )
       X   4248 /* times returns 0 in BSD Unix, so we use ftime instead */
       X   4249 #include <sys/types.h>
       X   4250 #include <sys/timeb.h>
       X   4251 float fxTime(void)
       X   4252 {
       X   4253     struct timeb tb;
       X   4254     static time_t once;                 // saves first time value
       X   4255 
       X   4256     ftime(&tb);
       X   4257     if (once == 0)                      // stash away first call
       X   4258         once = tb.time;                 // as float is not big enough
       X   4259     return (tb.time - once) + tb.millitm * .001;

FXOS                            Source Listing                   9-MAY-2021 23:43:27  VSI C V7.4-002-50R2O              Page 2
V1.0                                                             8-MAY-2021 20:01:26  fxos.c;3

       X   4260 }
       X   4261 #elif defined ( WIN32 ) || ( __DOS__ )
       X   4262 #include <time.h>
       X   4263 float fxTime(void)
       X   4264 {
       X   4265     return clock()/(float)CLOCKS_PER_SEC;
       X   4266 }
       X   4267 #else
	   4268 #include <sys/types.h>
	   4543 #include <sys/times.h>
	   4673 ///#include <sys/param.h>
	   4674 
	   4675 #define HZ 1000
	   4676 
	   4677 float fxTime(void)
      1	   4678 {
      1	   4679     struct tms foo;
      1	   4680     return times(&foo)/(float)HZ;
      1	   4681 }
	   4682 #endif
	   4683 
	   4684 /* returns elapsed time in seconds */
	   4685 float timer(int flag)
      1	   4686 {
      1	   4687     static float starttime,endtime;
      1	   4688 
      1	   4689     if (flag == 0)
      1	   4690         starttime = endtime = fxTime();
      1	   4691     else
      1	   4692         endtime = fxTime();
      1	   4693     return endtime - starttime;
      1	   4694 }
	   4695 #endif
	   4696 
	   4697 //----------------------------------------------------------------------
	   4698 // open a file thru a search path, first search in the current directory
	   4699 // and then go thru the semicolon separated search path
	   4700 // returns the file handle and the path prefix that was used (if one)
	   4701 //----------------------------------------------------------------------
	   4702 FILE *fxFopenPath(const char *filename, const char *mode, const char *path, const char **pprefix)
      1	   4703 {
      1	   4704     char *psemi;
      1	   4705     FILE *file;
      1	   4706 
      1	   4707     // first try and open up the file in the current directory
      1	   4708     if (pprefix) *pprefix = NULL;
      1	   4709     if ((file = fopen(filename,mode)) != NULL)
      1	   4710         return file;
      1	   4711     if (path == NULL)
      1	   4712         return NULL;
      1	   4713 
      2	   4714     while (*path) {             // for each chunk of the search path
      2	   4715         char nameWithPath[1024];
      2	   4716         psemi = strchr(path,';');               // find the next semicolon
      3	   4717         if (psemi) {                            // if one, copy up to it
      3	   4718             strncpy(nameWithPath,path,psemi-path);
      3	   4719             nameWithPath[psemi-path] = '\0';

FXOS                            Source Listing                   9-MAY-2021 23:43:27  VSI C V7.4-002-50R2O              Page 3
V1.0                                                             8-MAY-2021 20:01:26  fxos.c;3

      2	   4720         }
      2	   4721         else                                    // else copy entire path
      2	   4722             strcpy(nameWithPath,path);
      2	   4723         strcat(nameWithPath,"/");               // add directory separator
      2	   4724         strcat(nameWithPath,filename);          // add filename
      2	   4725         if (pprefix) *pprefix = path;           // save the prefix
      2	   4726         if ((file = fopen(nameWithPath,mode)) != NULL)
      2	   4727             return file;
      2	   4728         path = psemi;                           // advance to next path element
      2	   4729         if (path)
      2	   4730             path++;                             // if one, then skip semicolon
      2	   4731         else
      2	   4732             break;                              // else all done
      1	   4733     }
      1	   4734     return file;
      1	   4735 }


Command Line
------- ----

CC/DEBUG/NOOP/LIST=[.OUT.DEBUG.OBJ.GLIDE.SWLIBS.FXMISC]FXOS/OBJECT=[.OUT.DEBUG.
OBJ.GLIDE.SWLIBS.FXMISC]FXOS.OBJ/INCLUDE_DIRECTORY=([.GLIDE.SWLIBS.FXMISC],[.GL
IDE.GLIDE2X.CVG.INCSRC],[.GLIDE.GLIDE2X.CVG.GLIDE.SRC],[.GLIDE.GLIDE2X.CVG.INIT
],[.GLIDE.SWLIBS.NEWPCI.PCILIB])/DEFINE=(CVG,GLIDE_USE_C_TRISETUP,GLIDE_HW_TRI_
SETUP=1,GLIDE_TRI_CULLING=1,GLIDE_DEFAULT_GAMMA=1.3F,GLIDE_LIB=1) [.GLIDE.SWLIB
S.FXMISC]FXOS.C

Hardware: /ARCHITECTURE=GENERIC /OPTIMIZE=TUNE=GENERIC

These macros are in effect at the start of the compilation.
----- ------ --- -- ------ -- --- ----- -- --- ------------

 __G_FLOAT=1  __DECC=1  vms=1  VMS=1  __32BITS=1  __PRAGMA_ENVIRONMENT=1 
 __CRTL_VER=80400000  __vms_version="V8.4-2L1"  CC$gfloat=1  __X_FLOAT=1 
 GLIDE_HW_TRI_SETUP=1  GLIDE_USE_C_TRISETUP=1  vms_version="V8.4-2L1" 
 __DATE__="May  9 2021"  __STDC_VERSION__=199901L  __DECC_MODE_RELAXED=1 
 __DECC_VER=70490002  __VMS=1  GLIDE_DEFAULT_GAMMA=1.3F  GLIDE_LIB=1 
 __ALPHA=1  VMS_VERSION="V8.4-2L1"  __IEEE_FLOAT=0  __VMS_VERSION="V8.4-2L1" 
 __TIME__="23:43:28"  __Alpha_AXP=1  __VMS_VER=80421222 
 __BIASED_FLT_ROUNDS=2  CVG=1  __INITIAL_POINTER_SIZE=0  __STDC__=2 
 __LANGUAGE_C__=1  __vms=1  __alpha=1  __D_FLOAT=0  GLIDE_TRI_CULLING=1 

