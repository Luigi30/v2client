GU                              Source Listing                   9-MAY-2021 23:43:06  VSI C V7.4-002-50R2O              Page 1
V1.0                                                             8-MAY-2021 19:33:21  gu.c;3

	      1 /*
	      2 ** THIS SOFTWARE IS SUBJECT TO COPYRIGHT PROTECTION AND IS OFFERED ONLY
	      3 ** PURSUANT TO THE 3DFX GLIDE GENERAL PUBLIC LICENSE. THERE IS NO RIGHT
	      4 ** TO USE THE GLIDE TRADEMARK WITHOUT PRIOR WRITTEN PERMISSION OF 3DFX
	      5 ** INTERACTIVE, INC. A COPY OF THIS LICENSE MAY BE OBTAINED FROM THE 
	      6 ** DISTRIBUTOR OR BY CONTACTING 3DFX INTERACTIVE INC(info@3dfx.com). 
	      7 ** THIS PROGRAM IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER 
	      8 ** EXPRESSED OR IMPLIED. SEE THE 3DFX GLIDE GENERAL PUBLIC LICENSE FOR A
	      9 ** FULL TEXT OF THE NON-WARRANTY PROVISIONS.  
	     10 ** 
	     11 ** USE, DUPLICATION OR DISCLOSURE BY THE GOVERNMENT IS SUBJECT TO
	     12 ** RESTRICTIONS AS SET FORTH IN SUBDIVISION (C)(1)(II) OF THE RIGHTS IN
	     13 ** TECHNICAL DATA AND COMPUTER SOFTWARE CLAUSE AT DFARS 252.227-7013,
	     14 ** AND/OR IN SIMILAR OR SUCCESSOR CLAUSES IN THE FAR, DOD OR NASA FAR
	     15 ** SUPPLEMENT. UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT LAWS OF
	     16 ** THE UNITED STATES.  
	     17 ** 
	     18 ** COPYRIGHT 3DFX INTERACTIVE, INC. 1999, ALL RIGHTS RESERVED
	     19 **
	     20  * 
	     21  * 14    12/18/97 2:13p Peter
	     22  * fogTable cataclysm
	     23  * 
	     24  * 13    5/27/97 1:16p Peter
	     25  * Basic cvg, w/o cmd fifo stuff. 
	     26  * 
	     27  * 12    5/21/97 6:05a Peter
	     28  * 
	     29  * 11    3/09/97 10:31a Dow
	     30  * Added GR_DIENTRY for di glide functions
	     31  * 
	     32  * 10    3/05/97 9:36p Jdt
	     33  * Added guEncodeRLE16
	     34  * 
	     35  * 9     12/23/96 1:37p Dow
	     36  * chagnes for multiplatform glide
	     37 **
	     38 */
	     39 
	     40 #include <3dfx.h>
	    171 
	    172 #define FX_DLL_DEFINITION
	    173 #include <fxdll.h>
	    294 #include <glide.h>
	   2236 #include "fxglide.h"
	  14128 
       X  14129 #if ( (GLIDE_PLATFORM & GLIDE_SST_HW) && (GLIDE_PLATFORM & GLIDE_HW_SST1) )
       X  14130 #include <sst1init.h>
       X  14131 #endif
	  14132 
	  14133 //#include "fxinline.h"
	  14134 
	  14135 /*---------------------------------------------------------------------------
	  14136 **  guAlphaSource
	  14137 */
	  14138 GR_DIENTRY(guAlphaSource, void, ( GrAlphaSource_t mode ))
      1	  14139 {

GU                              Source Listing                   9-MAY-2021 23:43:06  VSI C V7.4-002-50R2O              Page 2
V1.0                                                             8-MAY-2021 19:33:21  gu.c;3

      1	  14140   GDBG_INFO(99,"guAlphaSource(%d)\n",mode);
      2	  14141   switch ( mode ) {
      2	  14142   case GR_ALPHASOURCE_CC_ALPHA:
      2	  14143     grAlphaCombine( GR_COMBINE_FUNCTION_LOCAL, 
      2	  14144                     GR_COMBINE_FACTOR_NONE, 
      2	  14145                     GR_COMBINE_LOCAL_CONSTANT, 
      2	  14146                     GR_COMBINE_OTHER_NONE, 
      2	  14147                     FXFALSE );
      2	  14148     break;
      2	  14149 
      2	  14150   case GR_ALPHASOURCE_ITERATED_ALPHA:
      2	  14151     grAlphaCombine( GR_COMBINE_FUNCTION_LOCAL, 
      2	  14152                     GR_COMBINE_FACTOR_NONE, 
      2	  14153                     GR_COMBINE_LOCAL_ITERATED, 
      2	  14154                     GR_COMBINE_OTHER_NONE, 
      2	  14155                     FXFALSE );
      2	  14156     break;
      2	  14157 
      2	  14158   case GR_ALPHASOURCE_TEXTURE_ALPHA:
      2	  14159     grAlphaCombine( GR_COMBINE_FUNCTION_SCALE_OTHER, 
      2	  14160                     GR_COMBINE_FACTOR_ONE, 
      2	  14161                     GR_COMBINE_LOCAL_NONE, 
      2	  14162                     GR_COMBINE_OTHER_TEXTURE, 
      2	  14163                     FXFALSE );
      2	  14164     break;
      2	  14165 
      2	  14166   case GR_ALPHASOURCE_TEXTURE_ALPHA_TIMES_ITERATED_ALPHA:
      2	  14167     grAlphaCombine( GR_COMBINE_FUNCTION_SCALE_OTHER, 
      2	  14168                     GR_COMBINE_FACTOR_LOCAL, 
      2	  14169                     GR_COMBINE_LOCAL_ITERATED, 
      2	  14170                     GR_COMBINE_OTHER_TEXTURE, 
      2	  14171                     FXFALSE );
      2	  14172     break;
      2	  14173 
      2	  14174   default:
      2	  14175     GR_CHECK_F("grAlphaSource", 1, "unknown alpha source mode");
      2	  14176     break;
      1	  14177   }
      1	  14178 
      1	  14179   /* xxx not needed at the moment, should update grFogxxx
      1	  14180   _grVerifyNeedForITAlpha();
      1	  14181   */
      1	  14182 } /* guAlphaSource */
	  14183 
	  14184 /*---------------------------------------------------------------------------
	  14185 **  guColorCombineFunction
	  14186 */
	  14187 GR_DIENTRY(guColorCombineFunction, void, ( GrColorCombineFnc_t fnc ))
      1	  14188 {
      1	  14189   GDBG_INFO(99,"guColorCombineFunction(%d)\n",fnc);
      1	  14190 
      1	  14191   /* gross hack to get ITRGB_DELTA0 modes working */
      1	  14192   _grColorCombineDelta0Mode( FXFALSE );
      1	  14193 
      1	  14194   switch ( fnc )
      2	  14195   {
      2	  14196   case GR_COLORCOMBINE_ZERO:

GU                              Source Listing                   9-MAY-2021 23:43:06  VSI C V7.4-002-50R2O              Page 3
V1.0                                                             8-MAY-2021 19:33:21  gu.c;3

      2	  14197     grColorCombine( GR_COMBINE_FUNCTION_ZERO, GR_COMBINE_FACTOR_NONE, GR_COMBINE_LOCAL_NONE, GR_COMBINE_OTHER_NONE, 
      2	  14197 FXFALSE );
      2	  14198     break;
      2	  14199 
      2	  14200   case GR_COLORCOMBINE_CCRGB:
      2	  14201     grColorCombine( GR_COMBINE_FUNCTION_LOCAL, GR_COMBINE_FACTOR_NONE, GR_COMBINE_LOCAL_CONSTANT, GR_COMBINE_OTHER_N
      2	  14201 ONE, FXFALSE );
      2	  14202     break;
      2	  14203 
      2	  14204   case GR_COLORCOMBINE_ITRGB_DELTA0:
      2	  14205     _grColorCombineDelta0Mode( FXTRUE );
      2	  14206     /* FALL THRU */
      2	  14207   case GR_COLORCOMBINE_ITRGB:
      2	  14208     grColorCombine( GR_COMBINE_FUNCTION_LOCAL, GR_COMBINE_FACTOR_NONE, GR_COMBINE_LOCAL_ITERATED, GR_COMBINE_OTHER_N
      2	  14208 ONE, FXFALSE );
      2	  14209     break;
      2	  14210 
      2	  14211   case GR_COLORCOMBINE_DECAL_TEXTURE:
      2	  14212     grColorCombine( GR_COMBINE_FUNCTION_SCALE_OTHER, GR_COMBINE_FACTOR_ONE, GR_COMBINE_LOCAL_NONE, GR_COMBINE_OTHER_
      2	  14212 TEXTURE, FXFALSE );
      2	  14213     break;
      2	  14214 
      2	  14215   case GR_COLORCOMBINE_TEXTURE_TIMES_CCRGB:
      2	  14216     grColorCombine( GR_COMBINE_FUNCTION_SCALE_OTHER, GR_COMBINE_FACTOR_LOCAL, GR_COMBINE_LOCAL_CONSTANT, GR_COMBINE_
      2	  14216 OTHER_TEXTURE, FXFALSE );
      2	  14217     break;
      2	  14218 
      2	  14219   case GR_COLORCOMBINE_TEXTURE_TIMES_ITRGB_DELTA0:
      2	  14220     _grColorCombineDelta0Mode( FXTRUE );
      2	  14221     /* FALL THRU */
      2	  14222   case GR_COLORCOMBINE_TEXTURE_TIMES_ITRGB:
      2	  14223     grColorCombine( GR_COMBINE_FUNCTION_SCALE_OTHER, GR_COMBINE_FACTOR_LOCAL, GR_COMBINE_LOCAL_ITERATED, GR_COMBINE_
      2	  14223 OTHER_TEXTURE, FXFALSE );
      2	  14224     break;
      2	  14225 
      2	  14226   case GR_COLORCOMBINE_TEXTURE_TIMES_ITRGB_ADD_ALPHA:
      2	  14227     grColorCombine( GR_COMBINE_FUNCTION_SCALE_OTHER_ADD_LOCAL_ALPHA, GR_COMBINE_FACTOR_LOCAL, GR_COMBINE_LOCAL_ITERA
      2	  14227 TED, GR_COMBINE_OTHER_TEXTURE, FXFALSE );
      2	  14228     break;
      2	  14229 
      2	  14230   case GR_COLORCOMBINE_TEXTURE_TIMES_ALPHA:
      2	  14231     grColorCombine( GR_COMBINE_FUNCTION_SCALE_OTHER, GR_COMBINE_FACTOR_LOCAL_ALPHA, GR_COMBINE_LOCAL_NONE, GR_COMBIN
      2	  14231 E_OTHER_TEXTURE, FXFALSE );
      2	  14232     break;
      2	  14233 
      2	  14234   case GR_COLORCOMBINE_TEXTURE_TIMES_ALPHA_ADD_ITRGB:
      2	  14235     grColorCombine( GR_COMBINE_FUNCTION_SCALE_OTHER_ADD_LOCAL, GR_COMBINE_FACTOR_LOCAL_ALPHA, GR_COMBINE_LOCAL_ITERA
      2	  14235 TED, GR_COMBINE_OTHER_TEXTURE, FXFALSE );
      2	  14236     break;
      2	  14237 
      2	  14238   case GR_COLORCOMBINE_TEXTURE_ADD_ITRGB:
      2	  14239     grColorCombine( GR_COMBINE_FUNCTION_SCALE_OTHER_ADD_LOCAL, GR_COMBINE_FACTOR_ONE, GR_COMBINE_LOCAL_ITERATED, GR_
      2	  14239 COMBINE_OTHER_TEXTURE, FXFALSE );
      2	  14240     break;
      2	  14241 
      2	  14242   case GR_COLORCOMBINE_TEXTURE_SUB_ITRGB:
      2	  14243     grColorCombine( GR_COMBINE_FUNCTION_SCALE_OTHER_MINUS_LOCAL, GR_COMBINE_FACTOR_ONE, GR_COMBINE_LOCAL_ITERATED, G

GU                              Source Listing                   9-MAY-2021 23:43:06  VSI C V7.4-002-50R2O              Page 4
V1.0                                                             8-MAY-2021 19:33:21  gu.c;3

      2	  14243 R_COMBINE_OTHER_TEXTURE, FXFALSE );
      2	  14244     break;
      2	  14245 
      2	  14246   case GR_COLORCOMBINE_CCRGB_BLEND_ITRGB_ON_TEXALPHA:
      2	  14247     grColorCombine( GR_COMBINE_FUNCTION_BLEND, GR_COMBINE_FACTOR_TEXTURE_ALPHA, GR_COMBINE_LOCAL_CONSTANT, GR_COMBIN
      2	  14247 E_OTHER_ITERATED, FXFALSE );
      2	  14248     break;
      2	  14249 
      2	  14250   case GR_COLORCOMBINE_DIFF_SPEC_A:
      2	  14251     grColorCombine( GR_COMBINE_FUNCTION_SCALE_OTHER_ADD_LOCAL, GR_COMBINE_FACTOR_LOCAL_ALPHA, GR_COMBINE_LOCAL_ITERA
      2	  14251 TED, GR_COMBINE_OTHER_TEXTURE, FXFALSE );
      2	  14252     break;
      2	  14253 
      2	  14254   case GR_COLORCOMBINE_DIFF_SPEC_B:
      2	  14255     grColorCombine( GR_COMBINE_FUNCTION_SCALE_OTHER_ADD_LOCAL_ALPHA, GR_COMBINE_FACTOR_LOCAL, GR_COMBINE_LOCAL_ITERA
      2	  14255 TED, GR_COMBINE_OTHER_TEXTURE, FXFALSE );
      2	  14256     break;
      2	  14257 
      2	  14258   case GR_COLORCOMBINE_ONE:
      2	  14259     grColorCombine( GR_COMBINE_FUNCTION_ZERO, GR_COMBINE_FACTOR_NONE, GR_COMBINE_LOCAL_NONE, GR_COMBINE_OTHER_NONE, 
      2	  14259 FXTRUE );
      2	  14260     break;
      2	  14261     
      2	  14262   default:
      2	  14263     GR_CHECK_F("grColorCombineFunction", 1, "unsupported color combine function");
      2	  14264     break;
      1	  14265   }
      1	  14266 } /* guColorCombineFunction */
	  14267 
	  14268 /*---------------------------------------------------------------------------
	  14269 ** guEndianSwapWords
	  14270 */
	  14271 GR_DIENTRY(guEndianSwapWords, FxU32, ( FxU32 value ))
      1	  14272 {
      1	  14273    return ( ( value & 0xFFFF0000 ) >> 16 ) | ( value << 16 );
      1	  14274 }
	  14275 
	  14276 /*---------------------------------------------------------------------------
	  14277 ** guEndianSwapBytes
	  14278 */
	  14279 GR_DIENTRY(guEndianSwapBytes, FxU16, ( FxU16 value ))
      1	  14280 {
      1	  14281   return ( ( value & 0xFF00 ) >> 8 ) | ( value << 8 );
      1	  14282 }
	  14283 
	  14284 /*---------------------------------------------------------------------------
	  14285 ** guFogTableIndexToW
	  14286 */
	  14287 GR_DIENTRY(guFogTableIndexToW, float, ( int i ))
      1	  14288 {
      1	  14289   return (float)pow(2.0,3.0+(double)(i>>2)) / (8-(i&3));
      1	  14290 }
	  14291 
	  14292 /*---------------------------------------------------------------------------
	  14293 ** guFogGenerateExp
	  14294 */
	  14295 #define kInternalFogTableEntryCount 64

GU                              Source Listing                   9-MAY-2021 23:43:06  VSI C V7.4-002-50R2O              Page 5
V1.0                                                             8-MAY-2021 19:33:21  gu.c;3

	  14296 
	  14297 GR_DIENTRY(guFogGenerateExp, void,
	  14298            ( GrFog_t fogtable[], float density )) 
      1	  14299 {
      1	  14300   int   i;
      1	  14301   float f;
      1	  14302   float scale;
      1	  14303   float dp;
      1	  14304 
      1	  14305   GDBG_INFO(99,"guFogGenerateExp(0x%x,%g)\n",fogtable,density);
      1	  14306   dp = density * guFogTableIndexToW( kInternalFogTableEntryCount - 1 );
      1	  14307   scale = 1.0F / ( 1.0F - ( float ) exp( -dp ) );
      1	  14308 
      2	  14309   for ( i = 0; i < kInternalFogTableEntryCount; i++ ) {
      2	  14310      dp = density * guFogTableIndexToW( i );
      2	  14311      f = ( 1.0F - ( float ) exp( -dp ) ) * scale;
      2	  14312 
      2	  14313      if ( f > 1.0F )
      2	  14314         f = 1.0F;
      2	  14315      else if ( f < 0.0F )
      2	  14316         f = 0.0F;
      2	  14317 
      2	  14318      f *= 255.0F;
      2	  14319      fogtable[i] = ( GrFog_t ) f;
      1	  14320   }
      1	  14321 } /* guFogGenerateExp */
	  14322 
	  14323 /*---------------------------------------------------------------------------
	  14324 ** guFogGenerateExp2
	  14325 */
	  14326 GR_DIENTRY(guFogGenerateExp2, void,
	  14327            ( GrFog_t fogtable[], float density ))
      1	  14328 {
      1	  14329   int   i;
      1	  14330   float f;
      1	  14331   float scale;
      1	  14332   float dp;
      1	  14333 
      1	  14334   GDBG_INFO(99,"guFogGenerateExp2(0x%x,%g)\n",fogtable,density);
      1	  14335   dp = density * guFogTableIndexToW( kInternalFogTableEntryCount - 1 );
      1	  14336   scale = 1.0F / ( 1.0F - ( float ) exp( -( dp * dp ) ) );
      1	  14337 
      2	  14338   for ( i = 0; i < kInternalFogTableEntryCount; i++ ) {
      2	  14339      dp = density * guFogTableIndexToW( i );
      2	  14340      f = ( 1.0F - ( float ) exp( -( dp * dp ) ) ) * scale;
      2	  14341 
      2	  14342      if ( f > 1.0F )
      2	  14343         f = 1.0F;
      2	  14344      else if ( f < 0.0F )
      2	  14345         f = 0.0F;
      2	  14346 
      2	  14347      f *= 255.0F;
      2	  14348      fogtable[i] = ( GrFog_t ) f;
      1	  14349   }
      1	  14350 } /* guFogGenerateExp2 */
	  14351 
	  14352 /*---------------------------------------------------------------------------

GU                              Source Listing                   9-MAY-2021 23:43:06  VSI C V7.4-002-50R2O              Page 6
V1.0                                                             8-MAY-2021 19:33:21  gu.c;3

	  14353 ** guFogGenerateLinear
	  14354 */
	  14355 GR_DIENTRY(guFogGenerateLinear, void, 
	  14356            ( GrFog_t fogtable[kInternalFogTableEntryCount],
	  14357              float nearZ, float farZ ))
      1	  14358 {
      1	  14359    int i;
      1	  14360    float world_w;
      1	  14361    float f;
      1	  14362 
      1	  14363   GDBG_INFO(99,"guFogGenerateLinear(0x%x,%g,%g)\n",fogtable,nearZ,farZ);
      2	  14364   for ( i = 0; i < kInternalFogTableEntryCount; i++ ) {
      2	  14365     world_w = guFogTableIndexToW( i );
      2	  14366     if ( world_w > 65535.0F )
      2	  14367       world_w = 65535.0F;
      2	  14368     
      2	  14369     f = ( world_w - nearZ ) / ( farZ - nearZ );
      2	  14370     if ( f > 1.0F )
      2	  14371       f = 1.0F;
      2	  14372     else if ( f < 0.0F )
      2	  14373       f = 0.0F;
      2	  14374     f *= 255.0F;
      2	  14375     fogtable[i] = ( GrFog_t ) f;
      1	  14376   }
      1	  14377 } /* guFogGenerateLinear */
	  14378 
	  14379 /*
	  14380 ** setlevel
	  14381 */
	  14382 static void
	  14383 setlevel( FxU16 *data, FxU16 color, int width, int height )
      1	  14384 {
      1	  14385    int s, t;
      1	  14386 
      1	  14387    for ( t = 0; t < height; t++ )
      2	  14388    {
      2	  14389       for ( s = 0; s < width; s++ )
      3	  14390       {
      3	  14391          *data = color;
      3	  14392           data++;
      2	  14393       }
      1	  14394    }
      1	  14395 } /* setlevel */
	  14396 
	  14397 /*---------------------------------------------------------------------------
	  14398 **  guTexCreateColorMipMap
	  14399 */
	  14400 GR_DIENTRY(guTexCreateColorMipMap, FxU16 *, ( void ))
      1	  14401 {
      1	  14402    FxU32 memrequired;
      1	  14403    FxU16 *data;
      1	  14404    FxU16 *start;
      1	  14405 
      1	  14406    GDBG_INFO(99,"guTexCreateColorMipMap()\n");
      1	  14407    memrequired = 2 * ( 256 * 256 + 128 * 128 + 64 * 64 + 32 * 32 + 16 * 16 + 8 * 8 + 4 * 4 + 2 * 2 + 1 * 1 );
      1	  14408    start = data = malloc( memrequired );
      1	  14409    if ( !data )

GU                              Source Listing                   9-MAY-2021 23:43:06  VSI C V7.4-002-50R2O              Page 7
V1.0                                                             8-MAY-2021 19:33:21  gu.c;3

      1	  14410       return 0;
      1	  14411 
      1	  14412    setlevel( data,            0xF800, 256, 256 );
      1	  14413    setlevel( data += 256*256, 0x07e0, 128, 128 );
      1	  14414    setlevel( data += 128*128, 0x001F, 64, 64 );
      1	  14415    setlevel( data += 64*64,   0xFFFF, 32, 32);
      1	  14416    setlevel( data += 32*32,   0x0000, 16, 16 );
      1	  14417    setlevel( data += 16*16,   0xF800, 8, 8);
      1	  14418    setlevel( data += 8*8,     0x07e0, 4, 4 );
      1	  14419    setlevel( data += 4*4,     0x001f, 2, 2 );
      1	  14420    setlevel( data += 2*2,     0xFFFF, 1, 1 );
      1	  14421 
      1	  14422    return start;
      1	  14423 } /* guTexCreateColoMipMap */
	  14424 
	  14425 /* GMT: this code used to be in the code above but I removed it for
	  14426         readability, the first section was case(1) the second section
	  14427         was a replacement for the simple 32-bit copy loop
	  14428 */
       X  14429 #if 0
       X  14430 
       X  14431       /* GMT: from what I can tell its not bad to perform unaligned DWORD
       X  14432          loads on a P5, so we use the case 2) all the time
       X  14433          in fact, its twice as fast as doing aligned short copies
       X  14434          */
       X  14435 if ((dstX ^ (((FxU32)src)>>1)) & 1) {
       X  14436     /* case 1) a simple 16-bit copy loop */
       X  14437     for (x=0; x < w; x++) {
       X  14438         GR_SET16(lfbPtr[x], ((FxU16 *)src)[x]);
       X  14439     }
       X  14440 }
       X  14441 #endif
	  14442 
       X  14443 #if 0
	  14444 /* GMT: I tried to unroll the loop but for some reason the
	  14445    code scheduling was such that it was slower
	  14446    I think it had to do with the way the 2 mov instructions paired
	  14447    Perhaps they were unaligned in the cache?
       X  14448    */
       X  14449 FxU32 a,b;
       X  14450 FxU32 *s = (FxU32 *)src;
       X  14451 FxU32 *d = lfbPtr;
       X  14452 
       X  14453 while (d < &lfbPtr[w-1]) {
       X  14454     a = s[0];
       X  14455     b = s[1];
       X  14456     GR_SET(d[0], a);
       X  14457     GR_SET(d[1], b);
       X  14458     s += 2;
       X  14459     d += 2;
       X  14460 }
       X  14461 if (w & 1) {
       X  14462     GR_SET(d[0], s[0]);
       X  14463 }
       X  14464 #endif
	  14465 
	  14466 /*-------------------------------------------------------------------

GU                              Source Listing                   9-MAY-2021 23:43:06  VSI C V7.4-002-50R2O              Page 8
V1.0                                                             8-MAY-2021 19:33:21  gu.c;3

	  14467   Function: guEncodeRle
	  14468   Date: 3/5/96
	  14469   Implementor(s): jdt
	  14470   Library: Glide Utilities
	  14471   Description:
	  14472   Encode an RGB565 image into RLE16 format
	  14473   Arguments:
	  14474   dst - destination rle image data ( NULL for bytecount only )
	  14475   src - source rgb565 image data
	  14476   width - width of source data
	  14477   height - height of source data
	  14478   Return:
	  14479   number of bytes in encoded rle image
	  14480   -------------------------------------------------------------------*/
	  14481 GR_ENTRY( guEncodeRLE16, int, ( void *dst, void *src, FxU32 width, FxU32 height ))
      1	  14482 {
      1	  14483     int byteCount = 0;
      1	  14484     int sourceImageSizeInWords;
      1	  14485     FxU16 *srcPixels;
      1	  14486     FxU32 *dstPixels;
      1	  14487 
      1	  14488     sourceImageSizeInWords = width * height;
      1	  14489 
      1	  14490     srcPixels = src;
      1	  14491 
      2	  14492     if ( dst ) {
      2	  14493         dstPixels = dst;
      3	  14494         while( sourceImageSizeInWords-- ) {
      3	  14495             short length    = 1;
      3	  14496             short color     = *srcPixels;
      3	  14497             int   lookAhead = 1;
      3	  14498 
      3	  14499             while( (sourceImageSizeInWords-length)&&
      4	  14500                    (color == srcPixels[lookAhead]) ) {
      4	  14501                 length++;
      4	  14502                 lookAhead++;
      3	  14503             }
      3	  14504 
      3	  14505             *dstPixels = ((((FxU32)length)<<16) | ((FxU32)color));
      3	  14506             dstPixels++;
      3	  14507 
      3	  14508             byteCount+=4;
      3	  14509 
      3	  14510             srcPixels+=length;
      3	  14511             sourceImageSizeInWords-=length;            
      2	  14512         }
      2	  14513     } else {
      3	  14514         while( sourceImageSizeInWords-- ) {
      3	  14515             short length    = 1;
      3	  14516             short color     = *srcPixels;
      3	  14517             int   lookAhead = 1;
      3	  14518 
      3	  14519             while( (sourceImageSizeInWords-length)&&
      4	  14520                    (color == srcPixels[lookAhead]) ) {
      4	  14521                 length++;
      4	  14522                 lookAhead++;
      3	  14523             }

GU                              Source Listing                   9-MAY-2021 23:43:06  VSI C V7.4-002-50R2O              Page 9
V1.0                                                             8-MAY-2021 19:33:21  gu.c;3

      3	  14524 
      3	  14525             byteCount+=4;
      3	  14526             srcPixels+=length;
      3	  14527             sourceImageSizeInWords-=length;            
      2	  14528         }
      1	  14529     }
      1	  14530     return byteCount;
      1	  14531 }


Command Line
------- ----

CC/DEBUG/NOOP/LIST=[.OUT.DEBUG.OBJ.GLIDE.GLIDE2X.CVG.GLIDE.SRC]GU/OBJECT=[.OUT.
DEBUG.OBJ.GLIDE.GLIDE2X.CVG.GLIDE.SRC]GU.OBJ/INCLUDE_DIRECTORY=([.GLIDE.SWLIBS.
FXMISC],[.GLIDE.GLIDE2X.CVG.INCSRC],[.GLIDE.GLIDE2X.CVG.GLIDE.SRC],[.GLIDE.GLID
E2X.CVG.INIT],[.GLIDE.SWLIBS.NEWPCI.PCILIB])/DEFINE=(CVG,GLIDE_USE_C_TRISETUP,G
LIDE_HW_TRI_SETUP=1,GLIDE_TRI_CULLING=1,GLIDE_DEFAULT_GAMMA=1.3F,GLIDE_LIB=1) [
.GLIDE.GLIDE2X.CVG.GLIDE.SRC]GU.C

Hardware: /ARCHITECTURE=GENERIC /OPTIMIZE=TUNE=GENERIC

These macros are in effect at the start of the compilation.
----- ------ --- -- ------ -- --- ----- -- --- ------------

 __G_FLOAT=1  __DECC=1  vms=1  VMS=1  __32BITS=1  __PRAGMA_ENVIRONMENT=1 
 __CRTL_VER=80400000  __vms_version="V8.4-2L1"  CC$gfloat=1  __X_FLOAT=1 
 GLIDE_HW_TRI_SETUP=1  GLIDE_USE_C_TRISETUP=1  vms_version="V8.4-2L1" 
 __DATE__="May  9 2021"  __STDC_VERSION__=199901L  __DECC_MODE_RELAXED=1 
 __DECC_VER=70490002  __VMS=1  GLIDE_DEFAULT_GAMMA=1.3F  GLIDE_LIB=1 
 __ALPHA=1  VMS_VERSION="V8.4-2L1"  __IEEE_FLOAT=0  __VMS_VERSION="V8.4-2L1" 
 __TIME__="23:43:07"  __Alpha_AXP=1  __VMS_VER=80421222 
 __BIASED_FLT_ROUNDS=2  CVG=1  __INITIAL_POINTER_SIZE=0  __STDC__=2 
 __LANGUAGE_C__=1  __vms=1  __alpha=1  __D_FLOAT=0  GLIDE_TRI_CULLING=1 

