GUCLIP                          Source Listing                   9-MAY-2021 23:43:07  VSI C V7.4-002-50R2O              Page 1
V1.0                                                             8-MAY-2021 19:34:32  guclip.c;3

	      1 /*
	      2 ** THIS SOFTWARE IS SUBJECT TO COPYRIGHT PROTECTION AND IS OFFERED ONLY
	      3 ** PURSUANT TO THE 3DFX GLIDE GENERAL PUBLIC LICENSE. THERE IS NO RIGHT
	      4 ** TO USE THE GLIDE TRADEMARK WITHOUT PRIOR WRITTEN PERMISSION OF 3DFX
	      5 ** INTERACTIVE, INC. A COPY OF THIS LICENSE MAY BE OBTAINED FROM THE 
	      6 ** DISTRIBUTOR OR BY CONTACTING 3DFX INTERACTIVE INC(info@3dfx.com). 
	      7 ** THIS PROGRAM IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER 
	      8 ** EXPRESSED OR IMPLIED. SEE THE 3DFX GLIDE GENERAL PUBLIC LICENSE FOR A
	      9 ** FULL TEXT OF THE NON-WARRANTY PROVISIONS.  
	     10 ** 
	     11 ** USE, DUPLICATION OR DISCLOSURE BY THE GOVERNMENT IS SUBJECT TO
	     12 ** RESTRICTIONS AS SET FORTH IN SUBDIVISION (C)(1)(II) OF THE RIGHTS IN
	     13 ** TECHNICAL DATA AND COMPUTER SOFTWARE CLAUSE AT DFARS 252.227-7013,
	     14 ** AND/OR IN SIMILAR OR SUCCESSOR CLAUSES IN THE FAR, DOD OR NASA FAR
	     15 ** SUPPLEMENT. UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT LAWS OF
	     16 ** THE UNITED STATES.  
	     17 ** 
	     18 ** COPYRIGHT 3DFX INTERACTIVE, INC. 1999, ALL RIGHTS RESERVED
	     19 **
	     20 ** Revision 1.1.1.1.2.2  2005/04/26 00:02:45  koolsmoky
	     21 ** Use grDrawTriangle where TRISETUP is not necessary.
	     22 **
	     23 ** Revision 1.1.1.1.2.1  2005/01/22 14:52:02  koolsmoky
	     24 ** enabled packed argb for cmd packet type 3
	     25 **
	     26 ** Revision 1.1.1.1  1999/12/07 21:49:11  joseph
	     27 ** Initial checkin into SourceForge.
	     28 **
	     29  * 
	     30  * 12    12/15/97 5:52p Atai
	     31  * disable obsolete glide2 api for glide3
	     32  * 
	     33  * 11    12/09/97 12:20p Peter
	     34  * mac glide port
	     35  * 
	     36  * 10    12/08/97 12:06p Atai
	     37  * change prototype for grDrawPoint, grDrawLine, grDrawTriangel
	     38  * 
	     39  * 9     8/18/97 3:52p Peter
	     40  * pre-hw arrival fixes/cleanup
	     41  * 
	     42  * 8     7/31/97 11:14a Peter
	     43  * merge w/ sst1 glide tree, hopefully
	     44  * 
	     45  * 5     6/27/97 4:16p Atai
	     46  * fixed guDrawTriangleWithClip bug (#484) by removing +1.0F and -1.0F in
	     47  * intersectTop(), intersectBottom(), intersectLeft(), and
	     48  * intersectRight() routine
	     49  * 
	     50  * 4     3/09/97 10:31a Dow
	     51  * Added GR_DIENTRY for di glide functions
	     52 **
	     53 */
	     54 
	     55 #include <3dfx.h>
	    186 
	    187 #define FX_DLL_DEFINITION

GUCLIP                          Source Listing                   9-MAY-2021 23:43:07  VSI C V7.4-002-50R2O              Page 2
V1.0                                                             8-MAY-2021 19:34:32  guclip.c;3

	    188 #include <fxdll.h>
	    309 #include <glide.h>
	   2251 #include "fxglide.h"
	  14143 
	  14144 /* Moved per GMT cleanup */
	  14145 #define GU_PRIM_MAX_VERTICES 100
	  14146 
	  14147 static void
	  14148 calcParams(const GrVertex *a, const GrVertex *b, GrVertex *isect, float d)
      1	  14149 {
      1	  14150   GR_DCL_GC;
      2	  14151   if (gc->state.paramIndex & STATE_REQUIRES_IT_DRGB) {
      2	  14152     isect->r = a->r + d * ( b->r - a->r );
      2	  14153     isect->g = a->g + d * ( b->g - a->g );
      2	  14154     isect->b = a->b + d * ( b->b - a->b );
      1	  14155   }
      1	  14156     
      2	  14157   if (gc->state.paramIndex & STATE_REQUIRES_IT_ALPHA) {
      2	  14158     isect->a        = a->a        + d * ( b->a - a->a );
      1	  14159   }
      1	  14160 
      2	  14161   if (gc->state.paramIndex & STATE_REQUIRES_OOZ) {
      2	  14162     isect->ooz = a->ooz + d * ( b->ooz - a->ooz );
      1	  14163   }
      1	  14164 
      2	  14165   if (gc->state.paramIndex & STATE_REQUIRES_OOW_FBI) {
      2	  14166     isect->oow = a->oow + d * ( b->oow - a->oow);
      1	  14167   }
      1	  14168 
      2	  14169   if (gc->state.paramIndex & STATE_REQUIRES_ST_TMU0) {
      2	  14170     isect->tmuvtx[0].oow =
      2	  14171       a->tmuvtx[0].oow + d * ( b->tmuvtx[0].oow - a->tmuvtx[0].oow );
      2	  14172     isect->tmuvtx[0].sow =
      2	  14173       a->tmuvtx[0].sow + d * ( b->tmuvtx[0].sow - a->tmuvtx[0].sow );
      2	  14174     isect->tmuvtx[0].tow =
      2	  14175       a->tmuvtx[0].tow + d * ( b->tmuvtx[0].tow - a->tmuvtx[0].tow );
      1	  14176   }
      1	  14177 
      2	  14178   if (gc->state.paramIndex & STATE_REQUIRES_ST_TMU1) {
      2	  14179     isect->tmuvtx[1].oow =
      2	  14180       a->tmuvtx[1].oow + d * ( b->tmuvtx[1].oow - a->tmuvtx[1].oow );
      2	  14181     isect->tmuvtx[1].sow =
      2	  14182       a->tmuvtx[1].sow + d * ( b->tmuvtx[1].sow - a->tmuvtx[1].sow );
      2	  14183     isect->tmuvtx[1].tow =
      2	  14184       a->tmuvtx[1].tow + d * ( b->tmuvtx[1].tow - a->tmuvtx[1].tow );
      1	  14185   }
      1	  14186 
      1X  14187 #if (GLIDE_NUM_TMU > 2)
      1X  14188   if (gc->state.paramIndex & STATE_REQUIRES_ST_TMU2) {
      1X  14189     isect->tmuvtx[2].oow =
      1X  14190       a->tmuvtx[2].oow + d * ( b->tmuvtx[2].oow - a->tmuvtx[2].oow );
      1X  14191     isect->tmuvtx[2].sow =
      1X  14192       a->tmuvtx[2].sow + d * ( b->tmuvtx[2].sow - a->tmuvtx[2].sow );
      1X  14193     isect->tmuvtx[2].tow =
      1X  14194       a->tmuvtx[2].tow + d * ( b->tmuvtx[2].tow - a->tmuvtx[2].tow );
      1X  14195   }
      1X  14196 #endif

GUCLIP                          Source Listing                   9-MAY-2021 23:43:07  VSI C V7.4-002-50R2O              Page 3
V1.0                                                             8-MAY-2021 19:34:32  guclip.c;3

      1	  14197 
      1	  14198 } /* calcParams */
	  14199 
	  14200 static void 
	  14201 intersectTop( const GrVertex *a, const GrVertex *b, GrVertex *intersect )
      1	  14202 {
      1	  14203   GR_DCL_GC;
      1	  14204   float
      1	  14205     d = ( gc->state.clipwindowf_ymin - a->y ) / ( b->y - a->y );
      1	  14206   
      1	  14207   intersect->x        = a->x        + d * ( b->x - a->x );
      1	  14208   intersect->y        = gc->state.clipwindowf_ymin; 
      1	  14209   
      1	  14210   calcParams(a, b, intersect, d);
      1	  14211 
      1	  14212 } /* intersectTop */
	  14213 
	  14214 static void
	  14215 intersectBottom( const GrVertex *a, const GrVertex *b, GrVertex *intersect )
      1	  14216 {
      1	  14217   GR_DCL_GC;
      1	  14218   float
      1	  14219     d = ( gc->state.clipwindowf_ymax - a->y ) / ( b->y - a->y );
      1	  14220   
      1	  14221   intersect->x        = a->x        + d * ( b->x - a->x );
      1	  14222   intersect->y        = gc->state.clipwindowf_ymax; 
      1	  14223 
      1	  14224   calcParams(a, b, intersect, d);
      1	  14225 
      1	  14226 } /* intersectBottom */
	  14227 
	  14228 static void
	  14229 intersectRight( const GrVertex *a, const GrVertex *b, GrVertex *intersect )
      1	  14230 {
      1	  14231   GR_DCL_GC;
      1	  14232   float
      1	  14233     d = ( gc->state.clipwindowf_xmax - a->x ) / ( b->x - a->x );
      1	  14234   
      1	  14235   intersect->x        = gc->state.clipwindowf_xmax; 
      1	  14236   intersect->y        = a->y        + d * ( b->y - a->y );
      1	  14237 
      1	  14238   calcParams(a, b, intersect, d);
      1	  14239 
      1	  14240 } /* intersectRight */
	  14241 
	  14242 static void
	  14243 intersectLeft( const GrVertex *a, const GrVertex *b, GrVertex *intersect )
      1	  14244 {
      1	  14245   GR_DCL_GC;
      1	  14246   float
      1	  14247     d = ( gc->state.clipwindowf_xmin - a->x ) / ( b->x - a->x );
      1	  14248   
      1	  14249   intersect->x        = gc->state.clipwindowf_xmin;
      1	  14250   intersect->y        = a->y        + d * ( b->y - a->y );
      1	  14251 
      1	  14252   calcParams(a, b, intersect, d);
      1	  14253 

GUCLIP                          Source Listing                   9-MAY-2021 23:43:07  VSI C V7.4-002-50R2O              Page 4
V1.0                                                             8-MAY-2021 19:34:32  guclip.c;3

      1	  14254 } /* intersectLeft */
	  14255 
	  14256 static FxBool
	  14257 aboveYMin(const GrVertex *p)
      1	  14258 {
      1	  14259   GR_DCL_GC;
      1	  14260   return (( p->y > gc->state.clipwindowf_ymin ) ? FXTRUE : FXFALSE);
      1	  14261 } /* aboveYMin */
	  14262      
	  14263 
	  14264 static FxBool
	  14265 belowYMax(const GrVertex *p)
      1	  14266 {
      1	  14267   GR_DCL_GC;
      1	  14268   return (( p->y < gc->state.clipwindowf_ymax ) ? FXTRUE : FXFALSE);
      1	  14269 } /* belowYMax */
	  14270 
	  14271 static FxBool
	  14272 aboveXMin(const GrVertex *p)
      1	  14273 {
      1	  14274   GR_DCL_GC;
      1	  14275   return (( p->x > gc->state.clipwindowf_xmin ) ? FXTRUE : FXFALSE );
      1	  14276 } /* aboveXMin */
	  14277 
	  14278 static FxBool
	  14279 belowXMax(const GrVertex *p)
      1	  14280 {
      1	  14281   GR_DCL_GC;
      1	  14282   return (( p->x < gc->state.clipwindowf_xmax ) ? FXTRUE : FXFALSE );
      1	  14283 } /* belowXMax */
	  14284 
	  14285 /*
	  14286 ** shClipPolygon
	  14287 */
	  14288 static void
	  14289 shClipPolygon(
	  14290               const GrVertex invertexarray[],
	  14291               GrVertex outvertexarray[],
	  14292               int inlength, int *outlength,
	  14293               FxBool (*inside)(const GrVertex *p),
	  14294               void (*intersect)(
	  14295                                 const GrVertex *a,
	  14296                                 const GrVertex *b,
	  14297                                 GrVertex *intersect )
	  14298               )
      1	  14299 {
      1	  14300   GrVertex
      1	  14301     s, p /*, intersection */;
      1	  14302   int
      1	  14303     j;
      1	  14304   
      1	  14305   *outlength = 0;
      1	  14306   
      1	  14307   s = invertexarray[inlength-1];
      2	  14308   for ( j = 0; j < inlength; j++ ) {
      2	  14309     p = invertexarray[j];
      3	  14310     if ( inside( &p ) ) {

GUCLIP                          Source Listing                   9-MAY-2021 23:43:07  VSI C V7.4-002-50R2O              Page 5
V1.0                                                             8-MAY-2021 19:34:32  guclip.c;3

      4	  14311       if ( inside( &s ) ) {
      4	  14312         outvertexarray[*outlength] = p;
      4	  14313         (*outlength)++;
      4	  14314       }else {
      4X  14315 #if 0
      4X  14316         intersect( &s, &p, &intersection );
      4X  14317         outvertexarray[*outlength] = intersection;
      4X  14318 #else
      4	  14319         intersect( &s, &p, &outvertexarray[*outlength] );
      4	  14320 #endif
      4	  14321         (*outlength)++;
      4	  14322         outvertexarray[*outlength] = p;
      4	  14323         (*outlength)++;
      3	  14324       }
      3	  14325     } else {
      4	  14326       if ( inside( &s ) ) {
      4X  14327 #if 0
      4X  14328         intersect( &s, &p, &intersection );
      4X  14329         outvertexarray[*outlength] = intersection;
      4X  14330 #else
      4	  14331         intersect( &s, &p, &outvertexarray[*outlength] );
      4	  14332 #endif
      4	  14333         (*outlength)++;
      3	  14334       }
      2	  14335     }
      2	  14336     s = p;
      1	  14337   }
      1	  14338 } /* shClipPolygon */
	  14339 
	  14340 #ifndef GLIDE3_ALPHA
	  14341 /*---------------------------------------------------------------------------
	  14342 ** guDrawTriangleWithClip
	  14343 **
	  14344 ** NOTE:  This routine snaps vertices by adding a large number then
	  14345 ** subtracting that same number again.  In order for this to work
	  14346 ** you MUST set up the FPU to work in single precision mode.  Code
	  14347 ** to perform this is listed in the Appendix to the Glide Programmer's
	  14348 ** Guide.
	  14349 */
	  14350 static const float vertex_snap_constant = ( float ) ( 1L << 19 );
	  14351 
	  14352 GR_DIENTRY(guDrawTriangleWithClip, void,
	  14353            (const GrVertex *a, const GrVertex *b, const GrVertex *c ))
      1	  14354 {
      1	  14355   GR_DCL_GC;
      1	  14356   GrVertex
      1	  14357     output_array[8],
      1	  14358     output_array2[8],
      1	  14359     input_array[3];
      1	  14360   int
      1	  14361     i,
      1	  14362     outlength;
      1	  14363 
      1	  14364   GDBG_INFO_MORE(99,"guDrawTriangleWithClip(0x%x,0x%x,0x%x)\n",a,b,c);
      1	  14365 
      1	  14366   /*
      1	  14367    ** perform trivial accept

GUCLIP                          Source Listing                   9-MAY-2021 23:43:07  VSI C V7.4-002-50R2O              Page 6
V1.0                                                             8-MAY-2021 19:34:32  guclip.c;3

      1	  14368    */
      1	  14369   if (
      1	  14370       ( a->x >= gc->state.clipwindowf_xmin) &&
      1	  14371       ( a->x < gc->state.clipwindowf_xmax ) &&
      1	  14372       ( a->y >= gc->state.clipwindowf_ymin ) &&
      1	  14373       ( a->y < gc->state.clipwindowf_ymax ) &&
      1	  14374       ( b->x >= gc->state.clipwindowf_xmin ) &&
      1	  14375       ( b->x < gc->state.clipwindowf_xmax ) &&
      1	  14376       ( b->y >= gc->state.clipwindowf_ymin ) &&
      1	  14377       ( b->y < gc->state.clipwindowf_ymax ) &&
      1	  14378       ( c->x >= gc->state.clipwindowf_xmin ) &&
      1	  14379       ( c->x < gc->state.clipwindowf_xmax ) &&
      1	  14380       ( c->y >= gc->state.clipwindowf_ymin ) &&
      1	  14381       ( c->y < gc->state.clipwindowf_ymax )
      1	  14382       )
      2	  14383   {
      2X  14384 #ifdef GLIDE3
      2X  14385     grDrawTriangle( (void *)a, (void *)b, (void *)c );
      2X  14386 #else
      2	  14387     grDrawTriangle( a, b, c );
      2	  14388 #endif
      2	  14389     return;
      1	  14390   }
      1	  14391 
      1	  14392   /*
      1	  14393    ** go ahead and clip and render
      1	  14394    */
      1	  14395   input_array[0] = *a;
      1	  14396   input_array[1] = *b;
      1	  14397   input_array[2] = *c;
      1	  14398   
      1	  14399   shClipPolygon( input_array,   output_array,  3,         &outlength, belowXMax, intersectRight );
      1	  14400   shClipPolygon( output_array,  output_array2, outlength, &outlength, belowYMax, intersectBottom );
      1	  14401   shClipPolygon( output_array2, output_array,  outlength, &outlength, aboveXMin, intersectLeft );
      1	  14402   shClipPolygon( output_array,  output_array2, outlength, &outlength, aboveYMin, intersectTop );
      1	  14403   
      1	  14404   /*
      1	  14405    ** snap vertices then decompose the n-gon into triangles
      1	  14406    */
      1	  14407 #if defined ( __WATCOMC__ ) || defined ( __MSC__ ) || defined(__DJGPP__) || \
      1	  14408   defined(__GNUC__) || defined(__MWERKS__) || defined(__DECC)
      2	  14409   for ( i = 0; i < outlength; i++ ) {
      2	  14410     output_array2[i].x += vertex_snap_constant;
      2	  14411     output_array2[i].x -= vertex_snap_constant;
      2	  14412     output_array2[i].y += vertex_snap_constant;
      2	  14413     output_array2[i].y -= vertex_snap_constant;
      1	  14414   }
      1X  14415 #else
      1X  14416 #  error VERTEX SNAPPING MUST BE IMPLEMENTED FOR THIS COMPILER
      1X  14417 #endif
      1	  14418   grDrawPolygonVertexList( outlength, output_array2 );
      1	  14419 } /* guDrawTriangleWithClip */
	  14420 
	  14421 /*---------------------------------------------------------------------------
	  14422 **  guAADrawTriangleWithClip
	  14423 */
	  14424 GR_DIENTRY(guAADrawTriangleWithClip, void,

GUCLIP                          Source Listing                   9-MAY-2021 23:43:07  VSI C V7.4-002-50R2O              Page 7
V1.0                                                             8-MAY-2021 19:34:32  guclip.c;3

	  14425            (const GrVertex *a, const GrVertex *b, const GrVertex *c ))
      1	  14426 {
      1	  14427   GR_DCL_GC;
      1	  14428   GrVertex
      1	  14429     output_array[8],
      1	  14430     output_array2[8],
      1	  14431     input_array[3];
      1	  14432   int
      1	  14433     i,
      1	  14434     ilist[10],
      1	  14435     outlength;
      1	  14436 
      1	  14437   GDBG_INFO_MORE(99,"guAADrawTriangleWithClip(0x%x,0x%x,0x%x)\n",a,b,c);
      1	  14438 
      1	  14439    /*
      1	  14440     ** perform trivial accept
      1	  14441     */
      1	  14442   if (
      1	  14443       ( a->x >= gc->state.clipwindowf_xmin) &&
      1	  14444       ( a->x < gc->state.clipwindowf_xmax ) &&
      1	  14445       ( a->y >= gc->state.clipwindowf_ymin ) &&
      1	  14446       ( a->y < gc->state.clipwindowf_ymax ) &&
      1	  14447       ( b->x >= gc->state.clipwindowf_xmin ) &&
      1	  14448       ( b->x < gc->state.clipwindowf_xmax ) &&
      1	  14449       ( b->y >= gc->state.clipwindowf_ymin ) &&
      1	  14450       ( b->y < gc->state.clipwindowf_ymax ) &&
      1	  14451       ( c->x >= gc->state.clipwindowf_xmin ) &&
      1	  14452       ( c->x < gc->state.clipwindowf_xmax ) &&
      1	  14453       ( c->y >= gc->state.clipwindowf_ymin ) &&
      1	  14454       ( c->y < gc->state.clipwindowf_ymax )
      1	  14455       )
      2	  14456   {
      2	  14457     grAADrawTriangle( a, b, c, FXTRUE, FXTRUE, FXTRUE );
      2	  14458     return;
      1	  14459   }
      1	  14460 
      1	  14461   /*
      1	  14462    ** go ahead and clip and render
      1	  14463    */
      1	  14464   input_array[0] = *a;
      1	  14465   input_array[1] = *b;
      1	  14466   input_array[2] = *c;
      1	  14467   
      1	  14468   shClipPolygon( input_array,   output_array,  3,         &outlength, belowXMax, intersectRight );
      1	  14469   shClipPolygon( output_array,  output_array2, outlength, &outlength, belowYMax, intersectBottom );
      1	  14470   shClipPolygon( output_array2, output_array,  outlength, &outlength, aboveXMin, intersectLeft );
      1	  14471   shClipPolygon( output_array,  output_array2, outlength, &outlength, aboveYMin, intersectTop );
      1	  14472   
      1	  14473   /*
      1	  14474    ** snap vertices then decompose the n-gon into triangles
      1	  14475    */
      1	  14476 #if defined(__WATCOMC__) || defined(__MSC__) || defined (__DJGPP__) || \
      1	  14477   defined(__GNUC__) || defined(__MWERKS__) || defined(__DECC)
      2	  14478   for ( i = 0; i < outlength; i++ ) {
      2	  14479     output_array2[i].x += vertex_snap_constant;
      2	  14480     output_array2[i].x -= vertex_snap_constant;
      2	  14481     output_array2[i].y += vertex_snap_constant;

GUCLIP                          Source Listing                   9-MAY-2021 23:43:07  VSI C V7.4-002-50R2O              Page 8
V1.0                                                             8-MAY-2021 19:34:32  guclip.c;3

      2	  14482     output_array2[i].y -= vertex_snap_constant;
      2	  14483     ilist[i] = i;
      1	  14484   }
      1	  14485 
      1	  14486   ilist[outlength] = 0;
      1X  14487 #else
      1X  14488 #  error VERTEX SNAPPING MUST BE IMPLEMENTED FOR THIS COMPILER
      1X  14489 #endif
      1	  14490   grAADrawPolygon( outlength, ilist, output_array2 );
      1	  14491 } /* guAADrawTriangleWithClip */
	  14492 
	  14493 
	  14494 /*---------------------------------------------------------------------------
	  14495 **  guDrawPolygonVertexListWithClip
	  14496 */
	  14497 GR_DIENTRY(guDrawPolygonVertexListWithClip, void,
	  14498            ( int nverts, const GrVertex vlist[] ))
      1	  14499 {
      1	  14500   GrVertex
      1	  14501     output_array[GU_PRIM_MAX_VERTICES+8],
      1	  14502     output_array2[GU_PRIM_MAX_VERTICES+8];
      1	  14503    int
      1	  14504      i,
      1	  14505      outlength;
      1	  14506 
      1	  14507   GDBG_INFO_MORE(99,"guDrawPolygonVertexListWithClip(%d,0x%x)\n",nverts,vlist);
      1	  14508   /*
      1	  14509    ** go ahead and clip and render
      1	  14510    */
      1	  14511   shClipPolygon( vlist, output_array,  nverts, &outlength, belowXMax, intersectRight );
      1	  14512   shClipPolygon( output_array,  output_array2, outlength, &outlength, belowYMax, intersectBottom );
      1	  14513   shClipPolygon( output_array2, output_array,  outlength, &outlength, aboveXMin, intersectLeft );
      1	  14514   shClipPolygon( output_array,  output_array2, outlength, &outlength, aboveYMin, intersectTop );
      1	  14515 
      1	  14516   /*
      1	  14517    ** snap vertices then decompose the n-gon into triangles
      1	  14518    */
      1	  14519 #if defined(__WATCOMC__) || defined(__MSC__) || defined(__DJGPP__) || \
      1	  14520   defined(__GNUC__) || defined(__MWERKS__) || defined(__DECC)
      2	  14521   for ( i = 0; i < outlength; i++ ) {
      2	  14522     output_array2[i].x += vertex_snap_constant;
      2	  14523     output_array2[i].x -= vertex_snap_constant;
      2	  14524     output_array2[i].y += vertex_snap_constant;
      2	  14525     output_array2[i].y -= vertex_snap_constant;
      1	  14526   }
      1X  14527 #else
      1X  14528 #  error VERTEX SNAPPING MUST BE IMPLEMENTED FOR THIS COMPILER
      1X  14529 #endif
      1	  14530   grDrawPolygonVertexList( outlength, output_array2 );
      1	  14531 } /* guDrawPolygonVertexListWithClip */
	  14532 
	  14533 #endif /* !GLIDE3_ALPHA */

GUCLIP                          Source Listing                   9-MAY-2021 23:43:07  VSI C V7.4-002-50R2O              Page 9
V1.0                                                             8-MAY-2021 19:34:32  guclip.c;3

Command Line
------- ----

CC/DEBUG/NOOP/LIST=[.OUT.DEBUG.OBJ.GLIDE.GLIDE2X.CVG.GLIDE.SRC]GUCLIP/OBJECT=[.
OUT.DEBUG.OBJ.GLIDE.GLIDE2X.CVG.GLIDE.SRC]GUCLIP.OBJ/INCLUDE_DIRECTORY=([.GLIDE
.SWLIBS.FXMISC],[.GLIDE.GLIDE2X.CVG.INCSRC],[.GLIDE.GLIDE2X.CVG.GLIDE.SRC],[.GL
IDE.GLIDE2X.CVG.INIT],[.GLIDE.SWLIBS.NEWPCI.PCILIB])/DEFINE=(CVG,GLIDE_USE_C_TR
ISETUP,GLIDE_HW_TRI_SETUP=1,GLIDE_TRI_CULLING=1,GLIDE_DEFAULT_GAMMA=1.3F,GLIDE_
LIB=1) [.GLIDE.GLIDE2X.CVG.GLIDE.SRC]GUCLIP.C

Hardware: /ARCHITECTURE=GENERIC /OPTIMIZE=TUNE=GENERIC

These macros are in effect at the start of the compilation.
----- ------ --- -- ------ -- --- ----- -- --- ------------

 __G_FLOAT=1  __DECC=1  vms=1  VMS=1  __32BITS=1  __PRAGMA_ENVIRONMENT=1 
 __CRTL_VER=80400000  __vms_version="V8.4-2L1"  CC$gfloat=1  __X_FLOAT=1 
 GLIDE_HW_TRI_SETUP=1  GLIDE_USE_C_TRISETUP=1  vms_version="V8.4-2L1" 
 __DATE__="May  9 2021"  __STDC_VERSION__=199901L  __DECC_MODE_RELAXED=1 
 __DECC_VER=70490002  __VMS=1  GLIDE_DEFAULT_GAMMA=1.3F  GLIDE_LIB=1 
 __ALPHA=1  VMS_VERSION="V8.4-2L1"  __IEEE_FLOAT=0  __VMS_VERSION="V8.4-2L1" 
 __TIME__="23:43:08"  __Alpha_AXP=1  __VMS_VER=80421222 
 __BIASED_FLT_ROUNDS=2  CVG=1  __INITIAL_POINTER_SIZE=0  __STDC__=2 
 __LANGUAGE_C__=1  __vms=1  __alpha=1  __D_FLOAT=0  GLIDE_TRI_CULLING=1 

