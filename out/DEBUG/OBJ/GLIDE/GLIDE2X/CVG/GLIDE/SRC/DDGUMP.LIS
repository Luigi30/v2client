DDGUMP                          Source Listing                   9-MAY-2021 23:42:41  VSI C V7.4-002-50R2O              Page 1
V1.0                                                             2-FEB-2021 02:11:10  ddgump.c;1

	      1 /*
	      2 ** THIS SOFTWARE IS SUBJECT TO COPYRIGHT PROTECTION AND IS OFFERED ONLY
	      3 ** PURSUANT TO THE 3DFX GLIDE GENERAL PUBLIC LICENSE. THERE IS NO RIGHT
	      4 ** TO USE THE GLIDE TRADEMARK WITHOUT PRIOR WRITTEN PERMISSION OF 3DFX
	      5 ** INTERACTIVE, INC. A COPY OF THIS LICENSE MAY BE OBTAINED FROM THE 
	      6 ** DISTRIBUTOR OR BY CONTACTING 3DFX INTERACTIVE INC(info@3dfx.com). 
	      7 ** THIS PROGRAM IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER 
	      8 ** EXPRESSED OR IMPLIED. SEE THE 3DFX GLIDE GENERAL PUBLIC LICENSE FOR A
	      9 ** FULL TEXT OF THE NON-WARRANTY PROVISIONS.  
	     10 ** 
	     11 ** USE, DUPLICATION OR DISCLOSURE BY THE GOVERNMENT IS SUBJECT TO
	     12 ** RESTRICTIONS AS SET FORTH IN SUBDIVISION (C)(1)(II) OF THE RIGHTS IN
	     13 ** TECHNICAL DATA AND COMPUTER SOFTWARE CLAUSE AT DFARS 252.227-7013,
	     14 ** AND/OR IN SIMILAR OR SUCCESSOR CLAUSES IN THE FAR, DOD OR NASA FAR
	     15 ** SUPPLEMENT. UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT LAWS OF
	     16 ** THE UNITED STATES.  
	     17 ** 
	     18 ** COPYRIGHT 3DFX INTERACTIVE, INC. 1999, ALL RIGHTS RESERVED
	     19 **
	     20 ** Revision 1.2.2.2  2005/04/26 00:02:44  koolsmoky
	     21 ** Use grDrawTriangle where TRISETUP is not necessary.
	     22 **
	     23 ** Revision 1.2.2.1  2005/01/22 14:52:01  koolsmoky
	     24 ** enabled packed argb for cmd packet type 3
	     25 **
	     26 ** Revision 1.2  2000/10/03 18:28:33  mercury
	     27 ** 003-clean_up_cvg-000, cvg tree cleanup.
	     28 **
	     29 ** Revision 1.1.1.1  1999/12/07 21:49:08  joseph
	     30 ** Initial checkin into SourceForge.
	     31 **
	     32 ** 
	     33 ** 16    2/20/98 11:00a Peter
	     34 ** removed glide3 from glid2 tree
	     35  * 
	     36  * 15    12/17/97 4:45p Peter
	     37  * groundwork for CrybabyGlide
	     38  * 
	     39  * 14    12/15/97 5:51p Atai
	     40  * disable obsolete glide2 api for glide3
	     41  * 
	     42  * 13    12/08/97 12:06p Atai
	     43  * change prototype for grDrawPoint, grDrawLine, grDrawTriangel
	     44  * 
	     45  * 12    11/18/97 4:36p Peter
	     46  * chipfield stuff cleanup and w/ direct writes
	     47  * 
	     48  * 11    11/17/97 4:55p Peter
	     49  * watcom warnings/chipfield stuff
	     50  * 
	     51  * 10    11/03/97 3:43p Peter
	     52  * h3/cvg cataclysm
	     53  * 
	     54  * 9     10/27/97 1:16p Peter
	     55  * fixed silliness
	     56  * 
	     57  * 8     10/27/97 11:10a Peter

DDGUMP                          Source Listing                   9-MAY-2021 23:42:41  VSI C V7.4-002-50R2O              Page 2
V1.0                                                             2-FEB-2021 02:11:10  ddgump.c;1

	     58  * starting cleanup
	     59  * 
	     60  * 7     9/15/97 7:31p Peter
	     61  * more cmdfifo cleanup, fixed normal buffer clear, banner in the right
	     62  * place, lfb's are on, Hmmmm.. probably more
	     63  * 
	     64  * 6     9/04/97 3:32p Peter
	     65  * starting grouping serial reg writes
	     66  * 
	     67  * 5     6/06/97 10:47a Peter
	     68  * texture downloading, fixed 640x480 dimension, changed cvg dep to be the
	     69  * same as sst1
	     70  * 
	     71  * 4     5/27/97 1:16p Peter
	     72  * Basic cvg, w/o cmd fifo stuff. 
	     73  * 
	     74  * 3     5/21/97 6:04a Peter
	     75  * 
	     76  * 2     3/04/97 9:08p Dow
	     77  * 
	     78  * 1     12/23/96 1:39p Dow
	     79  * Changes for multiplatform
	     80 **
	     81 */
	     82 
	     83 /* Implements multipass drawing */
	     84 
	     85 #include <3dfx.h>
	    216 #define FX_DLL_DEFINITION
	    217 #include <fxdll.h>
	    338 #include <glide.h>
	   2280 #include "fxglide.h"
	  14172 #include "gump.h"
	  14228 
	  14229 /* gump.c */
	  14230 extern GrMPState _gumpState;
	  14231 
	  14232 /*
	  14233 ** _gumpTexCombineFunction
	  14234 **                                                          
	  14235 ** Sets the texture combine function.  For a dual TMU system this function
	  14236 ** will configure the TEXTUREMODE registers as appropriate.  For a
	  14237 ** single TMU system this function will configure TEXTUREMODE if
	  14238 ** possible, or defer operations until grDrawTriangle() is called.
	  14239 */
	  14240 GR_DDFUNC(_gumpTexCombineFunction, void, (int virtual_tmu))
      1	  14241 {
      1	  14242 #define FN_NAME "_gumpTexCombineFunction"
      1	  14243   FxU32 texmode;
      1	  14244   GrMPTextureCombineFnc_t tc;
      1	  14245 
      1	  14246   GR_BEGIN_NOFIFOCHECK("_gumpTexCombineFunction",99);
      1	  14247   GDBG_INFO_MORE(gc->myLevel,"(%d)\n",virtual_tmu);
      1	  14248 
      1	  14249   texmode = gc->state.tmu_config[0].textureMode;
      1	  14250   texmode &= ~(SST_TCOMBINE | SST_TACOMBINE);
      1	  14251   tc = _gumpState.tc_fnc;

DDGUMP                          Source Listing                   9-MAY-2021 23:42:41  VSI C V7.4-002-50R2O              Page 3
V1.0                                                             2-FEB-2021 02:11:10  ddgump.c;1

      1	  14252 
      2	  14253   switch (tc) {
      2	  14254   case GR_MPTEXTURECOMBINE_ADD:
      2	  14255     /* tmu0: other + local */
      2	  14256     /* tmu1: local */
      2	  14257     /* pass0(tm0): local */
      2	  14258     /* pass1(tm1): local */
      3	  14259     if (virtual_tmu == 0) {
      3	  14260       texmode |= (SST_TC_REPLACE | SST_TCA_REPLACE);
      3	  14261     } else {
      3	  14262       texmode |= (SST_TC_REPLACE | SST_TCA_REPLACE);
      2	  14263     }
      2	  14264     break;
      2	  14265 
      2	  14266   case GR_MPTEXTURECOMBINE_MULTIPLY:
      2	  14267     /* tmu0: other * local */
      2	  14268     /* tmu1: local */
      2	  14269     /* pass0(tm0): local */
      2	  14270     /* pass1(tm1): local */
      3	  14271     if (virtual_tmu == 0) {
      3	  14272       texmode |= (SST_TC_REPLACE | SST_TCA_REPLACE);
      3	  14273     } else {
      3	  14274       texmode |= (SST_TC_REPLACE | SST_TCA_REPLACE);
      2	  14275     }
      2	  14276     break;
      2	  14277     
      2	  14278   case GR_MPTEXTURECOMBINE_DETAIL0:
      2	  14279     /* tmu0: (other - local) * lod + local */
      2	  14280     /*     = lod * other + (1 - lod) * local */
      2	  14281     /* tmu1: local */
      2	  14282     /* pass0(tm0): (-local) * lod + local */
      2	  14283     /*           = (1 - lod) * local */
      2	  14284     /* pass1(tm1): (-local) * (1 - lod) + local */
      2	  14285     /*           = lod * local */
      3	  14286     if (virtual_tmu == 0) {
      3	  14287       texmode |= (SST_TC_BLEND_LOD | SST_TCA_BLEND_LOD |
      3	  14288                   SST_TC_ZERO_OTHER | SST_TCA_ZERO_OTHER);
      3	  14289     } else {
      3	  14290       texmode |= (SST_TC_BLEND_LOD | SST_TCA_BLEND_LOD |
      3	  14291                   SST_TC_REVERSE_BLEND | SST_TCA_REVERSE_BLEND |
      3	  14292                   SST_TC_ZERO_OTHER | SST_TCA_ZERO_OTHER);      
      2	  14293     }
      2	  14294     break;
      2	  14295 
      2	  14296   case GR_MPTEXTURECOMBINE_DETAIL1:
      2	  14297     /* tmu0: (other - local) * (1 - lod) + local */
      2	  14298     /*     = (1 - lod) * other + lod * local */
      2	  14299     /* tmu1: local */
      2	  14300     /* pass0(tm0): (-local) * (1 - lod) + local */
      2	  14301     /*           = lod * local */
      2	  14302     /* pass1(tm1): (-local) * lod + local */
      2	  14303     /*           = (1 - lod) * local */
      3	  14304     if (virtual_tmu == 0) {
      3	  14305       texmode |= (SST_TC_BLEND_LOD | SST_TCA_BLEND_LOD |
      3	  14306                   SST_TC_REVERSE_BLEND | SST_TCA_REVERSE_BLEND |
      3	  14307                   SST_TC_ZERO_OTHER | SST_TCA_ZERO_OTHER);
      3	  14308     } else {

DDGUMP                          Source Listing                   9-MAY-2021 23:42:41  VSI C V7.4-002-50R2O              Page 4
V1.0                                                             2-FEB-2021 02:11:10  ddgump.c;1

      3	  14309       texmode |= (SST_TC_BLEND_LOD | SST_TCA_BLEND_LOD |
      3	  14310                   SST_TC_ZERO_OTHER | SST_TCA_ZERO_OTHER);
      2	  14311     }
      2	  14312     break;
      2	  14313 
      2	  14314   case GR_MPTEXTURECOMBINE_TRILINEAR0:
      2	  14315     /* tmu0: (other - local) * lodbfrac + local */
      2	  14316     /*     = lodbfrac * other + (1 - lodbfrac) * local */
      2	  14317     /* tmu1: local */
      2	  14318     /* pass0(tm0): (-local) * lodbfrac + local */
      2	  14319     /*           = (1 - lodbfrac) * local */
      2	  14320     /* pass1(tm1): (-local) * (1 - lodbfrac) + local */
      2	  14321     /*           = lodbfrac * local */
      3	  14322     if (virtual_tmu == 0) {
      3	  14323       texmode |= (SST_TC_BLEND_LODFRAC | SST_TCA_BLEND_LODFRAC |
      3	  14324                   SST_TC_ZERO_OTHER | SST_TCA_ZERO_OTHER);
      3	  14325     } else {
      3	  14326       texmode |= (SST_TC_BLEND_LODFRAC | SST_TCA_BLEND_LODFRAC |
      3	  14327                   SST_TC_REVERSE_BLEND | SST_TCA_REVERSE_BLEND |
      3	  14328                   SST_TC_ZERO_OTHER | SST_TCA_ZERO_OTHER);
      2	  14329     }
      2	  14330     break;
      2	  14331 
      2	  14332   case GR_MPTEXTURECOMBINE_TRILINEAR1:
      2	  14333     /* tmu0: (other - local) * (1 - lodbfrac) + local
      2	  14334        = (1 - lodbfrac) * other + lodbfrac * local
      2	  14335        tmu1: local
      2	  14336        pass0(tm0): (-local) * (1 - lodbfrac) + local
      2	  14337        = lodbfrac * local
      2	  14338        pass1(tm1): (-local) * lodbfrac + local
      2	  14339        = (1 - lodbfrac) * local
      2	  14340        */
      3	  14341     if (virtual_tmu == 0) {
      3	  14342       texmode |= (SST_TC_BLEND_LODFRAC | SST_TCA_BLEND_LODFRAC |
      3	  14343                   SST_TC_REVERSE_BLEND | SST_TCA_REVERSE_BLEND |
      3	  14344                   SST_TC_ZERO_OTHER | SST_TCA_ZERO_OTHER);
      3	  14345     } else {
      3	  14346       texmode |= (SST_TC_BLEND_LODFRAC | SST_TCA_BLEND_LODFRAC |
      3	  14347                   SST_TC_ZERO_OTHER | SST_TCA_ZERO_OTHER);
      2	  14348     }
      2	  14349     break;
      2	  14350 
      2	  14351   case GR_MPTEXTURECOMBINE_SUBTRACT:
      2	  14352     /*
      2	  14353       tmu0: other - local 
      2	  14354       tmu1: local
      2	  14355       doesn't work, alpha blender can't subtract
      2	  14356       */
      2	  14357     GrErrorCallback("_gumpTexCombineFunction:  TEXTURE_SUBTRACT not supported", FXFALSE);
      2	  14358     return;
      2	  14359     break;
      2	  14360 
      2	  14361   default:
      2	  14362     GrErrorCallback("_gumpTexCombineFunction:  Unsupported function", FXFALSE);
      2	  14363     return;
      2	  14364     break;
      1	  14365   }

DDGUMP                          Source Listing                   9-MAY-2021 23:42:41  VSI C V7.4-002-50R2O              Page 5
V1.0                                                             2-FEB-2021 02:11:10  ddgump.c;1

      1	  14366 
      1	  14367   GR_SET_EXPECTED_SIZE(sizeof(FxU32), 1);
      2	  14368   {
      2	  14369     SstRegs* tmuRegs = SST_TMU(hw, 0);
      2	  14370     
      2	  14371     GR_SET(eChipTMU0, tmuRegs, textureMode, texmode);
      1	  14372   }
      1	  14373   GR_CHECK_SIZE();
      1	  14374 
      1	  14375   GR_END();
      1	  14376 #undef _gumpTexCombineFunction
      1	  14377 } /* _gumpTexCombineFunction */
	  14378 
	  14379 GR_ENTRY(guMPDrawTriangle, void, (const GrVertex *a, const GrVertex *b, const GrVertex *c))
      1	  14380 {
      1	  14381   GR_BEGIN_NOFIFOCHECK("guMPDrawTriangle",98);
      1	  14382   GDBG_INFO_MORE(gc->myLevel,"(0x%x,0x%x,0x%x)\n",a,b,c);
      1	  14383   GR_CHECK_F(myName, !a || !b || !c, "NULL pointer passed");
      1	  14384 
      1	  14385   /* check for multipass texture modes */
      1	  14386   /* xxx complex multipass mode checks should be moved into gtex/gglide */
      1	  14387   /* specific color combine modes use texture */
      1	  14388   /* this is equivalent to
      1	  14389      fbzColorPath & SST_ENTEXTREMAP
      1	  14390      cc_state & STATE_CC_REQUIRES_DECAL_STW */
      1	  14391   /* specific texture combine modes */
      1	  14392   /* xxx don't even check anymore, because you can't */
      1	  14393 
      2	  14394   {
      2	  14395     /* check for not possible on one tmu modes */
      2	  14396     /* alpha blend enabled (grAlphaBlendMode)
      2	  14397        xxx some can work, with some cheats, even more
      2	  14398        low bit alpha switches between iterated and constant rgb
      2	  14399        (grAlphaControlsITRGBLighting)
      2	  14400        alpha test (grAlphaTestFunction)
      2	  14401        xxx actually, NEVER is ok too
      2	  14402        chromakey
      2	  14403        */
      2	  14404 
      2	  14405     if ((gc->state.fbi_config.alphaMode & SST_ENALPHABLEND) ||
      2	  14406         (gc->state.fbi_config.fbzColorPath & SST_LOCALSELECT_OVERRIDE_WITH_ATEX) ||
      2	  14407         (gc->state.fbi_config.alphaMode & SST_ENALPHAFUNC) ||
      3	  14408         (gc->state.fbi_config.fbzMode & SST_ENCHROMAKEY)) {
      3	  14409       GrErrorCallback("guMPDrawTriangle:  Illegal state", FXFALSE);
      2	  14410     }
      2	  14411 
      2	  14412     if (_gumpState.tc_fnc == GR_MPTEXTURECOMBINE_ADD ||
      2	  14413         _gumpState.tc_fnc == GR_MPTEXTURECOMBINE_DETAIL0 ||
      2	  14414         _gumpState.tc_fnc == GR_MPTEXTURECOMBINE_DETAIL1 ||
      2	  14415         _gumpState.tc_fnc == GR_MPTEXTURECOMBINE_TRILINEAR0 ||
      3	  14416         _gumpState.tc_fnc == GR_MPTEXTURECOMBINE_TRILINEAR1) {
      3	  14417       /* render pass with all effects */
      3	  14418       /* select other texture map */
      3	  14419       /* set alpha blend to add to dest buffer */
      3	  14420       /* if depth buffering, save depth buffer function,
      3	  14421          set to z-equal */
      3	  14422       /* disable fog and color combine bias */

DDGUMP                          Source Listing                   9-MAY-2021 23:42:41  VSI C V7.4-002-50R2O              Page 6
V1.0                                                             2-FEB-2021 02:11:10  ddgump.c;1

      3	  14423       /* render other pass */
      3	  14424       /* restore depth buffer function, restore alpha blend, enable fog
      3	  14425          and color combine bias */
      3	  14426 
      3	  14427       FxU32 alphamode, alphamode_orig;
      3	  14428       FxU32 fbzcolorpath, fbzcolorpath_orig;
      3	  14429       FxU32 fbzmode, fbzmode_orig = 0;
      3	  14430       FxU32 fogmode, fogmode_orig = 0;
      3	  14431 
      3	  14432       alphamode = alphamode_orig = gc->state.fbi_config.alphaMode;
      3	  14433       fbzcolorpath = fbzcolorpath_orig = gc->state.fbi_config.fbzColorPath;
      3	  14434       GR_CHECK_SIZE();
      3	  14435 
      3	  14436       /* first pass */
      3	  14437 
      3	  14438       /* tmu setup */
      3	  14439       guTexSource(_gumpState.mmid[0]);
      3	  14440       _gumpTexCombineFunction(0);
      3	  14441 
      3	  14442       /* render first pass */
      3	  14443       grDrawTriangle(a, b, c);
      3	  14444 
      3	  14445       /* second pass */
      3	  14446 
      3	  14447       /* xxx may need to copy texture coordinates, see
      3	  14448          grTexCombineFunction's second parameter.  if so,
      3	  14449          we have to disable the second coordinate when drawing. */
      3	  14450 
      3	  14451       /* tmu setup */
      3	  14452       guTexSource(_gumpState.mmid[1]);
      3	  14453       _gumpTexCombineFunction(1);
      3	  14454 
      4	  14455       {
      4	  14456         const FxBool depthP = ((gc->state.fbi_config.fbzMode & SST_ENDEPTHBUFFER) == SST_ENDEPTHBUFFER);
      4	  14457         const FxBool fogP = ((gc->state.fbi_config.fogMode & SST_ENFOGGING) == SST_ENFOGGING);
      4	  14458         const FxU32 regCount = (2 + depthP + fogP);
      4	  14459         const FxU32 regMask = (0x05 | MaskSelect(depthP, 0x08UL) | MaskSelect(fogP, 0x02UL));
      4	  14460 
      5	  14461         REG_GROUP_BEGIN(BROADCAST_ID, fbzColorPath, regCount, regMask);
      6	  14462         {
      6	  14463           /* disable biasing in color combine */
      6	  14464           /* this can change the parameters output */
      6	  14465           /* xxx the equivalent of GR_COLORCOMBINE_CCRGB_BLEND_ITRGB_ON_TEXALPHA
      6	  14466              does not work, you need to do this instead of below.
      6	  14467              
      6	  14468              if (gc->state.cc_fnc == GR_COLORCOMBINE_CCRGB_BLEND_ITRGB_ON_TEXALPHA)
      6	  14469              {
      6	  14470              fbzcolorpath &= ~SST_CC_ADD_CLOCAL;
      6	  14471              }
      6	  14472              */
      6	  14473       
      6	  14474           fbzcolorpath &= ~(SST_CC_ADD_CLOCAL | SST_CC_ADD_ALOCAL | SST_CC_SUB_CLOCAL);
      6	  14475           REG_GROUP_SET(hw, fbzColorPath, fbzcolorpath);
      6	  14476 
      6	  14477           /* disable (fogta * fogColor) bias */
      6	  14478           /* xxx setting ADD_FOG with fog disabled is harmless */
      7	  14479           if (fogP) {

DDGUMP                          Source Listing                   9-MAY-2021 23:42:41  VSI C V7.4-002-50R2O              Page 7
V1.0                                                             2-FEB-2021 02:11:10  ddgump.c;1

      7	  14480             fogmode = fogmode_orig = gc->state.fbi_config.fogMode;
      7	  14481             fogmode |= SST_FOGADD;
      7	  14482 
      7	  14483             REG_GROUP_SET(hw, fogMode, fogmode);
      6	  14484           }
      6	  14485 
      6	  14486           /* enable alpha blend to add to destination buffers */
      6	  14487           alphamode &= ~(SST_RGBSRCFACT | SST_RGBDSTFACT | SST_ASRCFACT | SST_ADSTFACT);
      6	  14488           alphamode |= (SST_ENALPHABLEND |
      6	  14489                         (SST_A_ONE << SST_RGBSRCFACT_SHIFT) |
      6	  14490                         (SST_A_ONE << SST_RGBDSTFACT_SHIFT) |
      6	  14491                         (SST_A_ONE << SST_ASRCFACT_SHIFT) |
      6	  14492                         (SST_A_ONE << SST_ADSTFACT_SHIFT));
      6	  14493 
      6	  14494           REG_GROUP_SET(hw, alphaMode, alphamode);
      6	  14495 
      6	  14496           /* if depth buffering, set to z= mode and disable writes */
      7	  14497           if (depthP) {
      7	  14498             fbzmode = fbzmode_orig = gc->state.fbi_config.fbzMode;
      7	  14499             
      7	  14500             fbzmode &= ~(SST_ZAWRMASK | SST_ZFUNC);
      7	  14501             fbzmode |= GR_CMP_EQUAL;
      7	  14502 
      7	  14503             REG_GROUP_SET(hw, fbzMode, fbzmode);
      6	  14504           }
      5	  14505         }
      4	  14506         REG_GROUP_END();
      4	  14507 
      4	  14508         /* render other pass */
      4	  14509         grDrawTriangle(a, b, c);
      4	  14510 
      4	  14511         /* restore */
      5	  14512         REG_GROUP_BEGIN(BROADCAST_ID, fbzColorPath, regCount, regMask);
      6	  14513         {
      6	  14514           /* restore ccu/acu state */
      6	  14515           REG_GROUP_SET(hw, fbzColorPath, fbzcolorpath_orig);
      6	  14516 
      6	  14517           /* restore fog state */
      6	  14518           if (fogP) REG_GROUP_SET(hw, fogMode, fogmode_orig);
      6	  14519 
      6	  14520           /* restore alpha blending state */
      6	  14521           REG_GROUP_SET(hw, alphaMode, alphamode_orig);
      6	  14522           
      6	  14523           /* restore depth buffer state */
      6	  14524           if (depthP) REG_GROUP_SET(hw, fbzMode, fbzmode_orig);
      5	  14525         }
      4	  14526         REG_GROUP_END();
      3	  14527       }
      3	  14528         
      3	  14529       goto all_done;
      3	  14530     } else if (_gumpState.tc_fnc == GR_MPTEXTURECOMBINE_MULTIPLY) {
      3	  14531       /* disable fog and color combine bias */
      3	  14532       /* render pass with all other effects */
      3	  14533       /* select other texture map */
      3	  14534       /* set alpha blend to multiply to dest buffer */
      3	  14535       /* if depth buffering, save depth buffer function,
      3	  14536          set to z-equal */

DDGUMP                          Source Listing                   9-MAY-2021 23:42:41  VSI C V7.4-002-50R2O              Page 8
V1.0                                                             2-FEB-2021 02:11:10  ddgump.c;1

      3	  14537       /* disable fog and color combine factor */
      3	  14538       /* render other pass */
      3	  14539       /* if fog or color combine w/bias */
      3	  14540       /* disable tmu */
      3	  14541       /* set alpha blend to add to dest buffer */
      3	  14542       /* enable fog and color combine bias */
      3	  14543       /* render bias pass */
      3	  14544       /* restore depth buffer function, restore alpha blend, enable fog
      3	  14545          and color combine bias */
      3	  14546 
      3	  14547       FxU32 alphamode, alphamode_orig;
      3	  14548       FxU32 fbzcolorpath, fbzcolorpath_orig;
      3	  14549       FxU32 fbzmode, fbzmode_orig = 0;
      3	  14550       FxU32 fogmode, fogmode_orig = 0;
      3	  14551 
      3	  14552       alphamode = alphamode_orig = gc->state.fbi_config.alphaMode;
      3	  14553       fbzcolorpath = fbzcolorpath_orig = gc->state.fbi_config.fbzColorPath;
      3	  14554 
      3	  14555       /* first pass */
      3	  14556 
      3	  14557       /* tmu setup */
      3	  14558 
      3	  14559       guTexSource(_gumpState.mmid[0]);
      3	  14560       _gumpTexCombineFunction(0);
      3	  14561 
      3	  14562       /* disable bias */
      4	  14563       {
      4	  14564         const FxBool depthP = ((gc->state.fbi_config.fbzMode & SST_ENDEPTHBUFFER) == SST_ENDEPTHBUFFER);
      4	  14565         const FxBool fogP = ((gc->state.fbi_config.fogMode & SST_ENFOGGING) == SST_ENFOGGING);
      4	  14566         const FxU32 regCount = (2 + depthP + fogP);
      4	  14567         const FxU32 regMask = (0x05 | MaskSelect(depthP, 0x08UL) | MaskSelect(fogP, 0x02UL));
      4	  14568 
      5	  14569         REG_GROUP_BEGIN(BROADCAST_ID, fbzColorPath, (1 + fogP), (0x01UL | MaskSelect(fogP, 0x02UL)));
      6	  14570         {
      6	  14571           /* disable biasing in color combine */
      6	  14572           /* this can change the parameters output */
      6	  14573           /* xxx consult add path for switch version */
      6	  14574           /* xxx the equivalent of GR_COLORCOMBINE_CCRGB_BLEND_ITRGB_ON_TEXALPHA
      6	  14575              does not work, you need to do this instead of below.
      6	  14576              
      6	  14577              if (gc->state.cc_fnc == GR_COLORCOMBINE_CCRGB_BLEND_ITRGB_ON_TEXALPHA)
      6	  14578              {
      6	  14579              fbzcolorpath &= ~SST_CC_ADD_CLOCAL;
      6	  14580              }
      6	  14581              */
      6	  14582 
      6	  14583           fbzcolorpath &= ~(SST_CC_ADD_CLOCAL | SST_CC_ADD_ALOCAL | SST_CC_SUB_CLOCAL);
      6	  14584           REG_GROUP_SET(hw, fbzColorPath, fbzcolorpath);
      6	  14585 
      6	  14586           /* disable (fogta * fogColor) bias */
      6	  14587           /* xxx setting ADD_FOG with fog disabled is harmless */
      7	  14588           if (fogP) {
      7	  14589             fogmode = fogmode_orig = gc->state.fbi_config.fogMode;
      7	  14590             fogmode |= SST_FOGADD;
      7	  14591 
      7	  14592             REG_GROUP_SET(hw, fogMode, fogmode);
      6	  14593           }

DDGUMP                          Source Listing                   9-MAY-2021 23:42:41  VSI C V7.4-002-50R2O              Page 9
V1.0                                                             2-FEB-2021 02:11:10  ddgump.c;1

      5	  14594         }
      4	  14595         REG_GROUP_END();
      4	  14596         
      4	  14597         /* render first pass */
      4	  14598         grDrawTriangle(a, b, c);
      4	  14599         
      4	  14600         /* second pass */
      4	  14601         /* xxx may sometimes need to copy texture coordinates */
      4	  14602         
      4	  14603         /* tmu setup */
      4	  14604         guTexSource(_gumpState.mmid[1]);
      4	  14605         _gumpTexCombineFunction(1);
      4	  14606 
      5	  14607         REG_GROUP_BEGIN(BROADCAST_ID, fbzColorPath, regCount, regMask);
      6	  14608         {
      6	  14609           /* disable factor and bias in color combine--
      6	  14610              decal, except for the cases that need texture alpha */
      6	  14611           /* this can change the parameters output */
      6	  14612           fbzcolorpath  = fbzcolorpath_orig;
      6	  14613           fbzcolorpath &= ~( SST_RGBSELECT |
      6	  14614                              SST_LOCALSELECT |
      6	  14615                              SST_CC_ZERO_OTHER |
      6	  14616                              SST_CC_SUB_CLOCAL |
      6	  14617                              SST_CC_MSELECT |
      6	  14618                              SST_CC_REVERSE_BLEND |
      6	  14619                              SST_CC_ADD_CLOCAL |
      6	  14620                              SST_CC_ADD_ALOCAL |
      6	  14621                              SST_CC_INVERT_OUTPUT |
      6	  14622                              SST_CC_REVERSE_BLEND );
      6	  14623           
      6	  14624           /* xxx the equivalent of GR_COLORCOMBINE_CCRGB_BLEND_ITRGB_ON_TEXALPHA
      6	  14625              does not work, you need to do this instead of below.
      6	  14626              
      6	  14627              if ( gc->state.cc_fnc == GR_COLORCOMBINE_CCRGB_BLEND_ITRGB_ON_TEXALPHA )
      6	  14628              {
      6	  14629              xxx see implementation notes on why this isn't implemented yet
      6	  14630              GrErrorCallback("guDrawTriangleMP: "
      6	  14631              "MULTIPLY and BLEND_ITRGB_ON_TEXALPHA not implemented yet!", FXFALSE );
      6	  14632              goto all_done;
      6	  14633              }
      6	  14634              */
      6	  14635           fbzcolorpath |= SST_RGBSEL_TMUOUT;
      6	  14636           REG_GROUP_SET(hw, fbzColorPath, fbzcolorpath);
      6	  14637 
      6	  14638           /* disable fog */
      6	  14639           if (fogP) REG_GROUP_SET(hw, fogMode, 0);
      6	  14640           
      6	  14641           /* enable alpha blend to multiply to destination buffers */
      6	  14642           /* xxx alpha component blender can only handle factors of
      6	  14643              0 and 1 */
      6	  14644           alphamode &= ~(SST_RGBSRCFACT | SST_RGBDSTFACT | SST_ASRCFACT | SST_ADSTFACT);
      6	  14645           alphamode |= (SST_ENALPHABLEND |
      6	  14646                         (SST_A_COLOR << SST_RGBSRCFACT_SHIFT) |
      6	  14647                         (SST_A_ZERO << SST_RGBDSTFACT_SHIFT) |
      6	  14648                         (SST_A_ONE << SST_ASRCFACT_SHIFT) |
      6	  14649                         (SST_A_ZERO << SST_ADSTFACT_SHIFT));
      6	  14650 

DDGUMP                          Source Listing                   9-MAY-2021 23:42:41  VSI C V7.4-002-50R2O              Page 10
V1.0                                                             2-FEB-2021 02:11:10  ddgump.c;1

      6	  14651           REG_GROUP_SET(hw, alphaMode, alphamode);
      6	  14652           
      6	  14653           /* if depth buffering, set to z= mode and disable writes */
      7	  14654           if (depthP) {
      7	  14655             fbzmode = fbzmode_orig = gc->state.fbi_config.fbzMode;
      7	  14656             fbzmode &= ~(SST_ZAWRMASK | SST_ZFUNC);
      7	  14657             fbzmode |= GR_CMP_EQUAL;
      7	  14658             
      7	  14659             REG_GROUP_SET(hw, fbzMode, fbzmode);
      6	  14660           }
      5	  14661         }
      4	  14662         REG_GROUP_END();
      4	  14663 
      4	  14664         /* render second pass */
      4	  14665         grDrawTriangle(a, b, c);
      4	  14666         
      4	  14667         /* if bias, third pass */
      5	  14668         if (fogP) {
      5	  14669           /* enable alpha blend to add to destination buffers */
      6	  14670           REG_GROUP_BEGIN(BROADCAST_ID, fogMode, 2, 0x03);
      7	  14671           {
      7	  14672             /* disable fog factor, leave fog bias enabled */
      7	  14673             /* xxx setting ADD_MULT with fog disabled is harmless */
      7	  14674             fogmode = fogmode_orig;
      7	  14675             fogmode |= SST_FOGMULT;
      7	  14676             REG_GROUP_SET(hw, fogMode, fogmode);
      7	  14677             
      7	  14678             alphamode &= ~(SST_RGBSRCFACT | SST_RGBDSTFACT | SST_ASRCFACT | SST_ADSTFACT);
      7	  14679             alphamode |= (SST_ENALPHABLEND |
      7	  14680                           (SST_A_ONE << SST_RGBSRCFACT_SHIFT) |
      7	  14681                           (SST_A_ONE << SST_RGBDSTFACT_SHIFT) |
      7	  14682                           (SST_A_ONE << SST_ASRCFACT_SHIFT) |
      7	  14683                           (SST_A_ONE << SST_ADSTFACT_SHIFT));
      7	  14684             REG_GROUP_SET(hw, alphaMode, alphamode);
      6	  14685           }
      5	  14686           REG_GROUP_END();
      5	  14687           
      5	  14688           /* render third pass */
      5	  14689           grDrawTriangle(a, b, c);
      4	  14690         }
      4	  14691 
      5	  14692         REG_GROUP_BEGIN(BROADCAST_ID, fbzColorPath, regCount, regMask);
      6	  14693         {
      6	  14694           /* restore ccu/acu state */
      6	  14695           REG_GROUP_SET(hw, fbzColorPath, fbzcolorpath_orig);
      6	  14696 
      6	  14697           /* restore fog state */
      6	  14698           if (fogP) REG_GROUP_SET(hw, fogMode, fogmode_orig);
      6	  14699 
      6	  14700           /* restore alpha blending state */
      6	  14701           REG_GROUP_SET(hw, alphaMode, alphamode_orig);
      6	  14702           
      6	  14703           /* restore depth buffer state */
      6	  14704           if (depthP) REG_GROUP_SET(hw, fbzMode, fbzmode_orig);
      5	  14705         }
      4	  14706         REG_GROUP_END();
      3	  14707       }

DDGUMP                          Source Listing                   9-MAY-2021 23:42:41  VSI C V7.4-002-50R2O              Page 11
V1.0                                                             2-FEB-2021 02:11:10  ddgump.c;1

      3	  14708 
      3	  14709       goto all_done;
      3	  14710     } else if (_gumpState.tc_fnc == GR_MPTEXTURECOMBINE_SUBTRACT) {
      3	  14711       GrErrorCallback("gumpDrawTriangle:  GR_MPTEXCOMBINE_SUBTRACT not implemented", FXFALSE);
      3	  14712       goto all_done;
      2	  14713     }
      1	  14714   }
      1	  14715 
      1	  14716 all_done:
      1	  14717   GR_END();
      1	  14718 }
	  14719 


Command Line
------- ----

CC/DEBUG/NOOP/LIST=[.OUT.DEBUG.OBJ.GLIDE.GLIDE2X.CVG.GLIDE.SRC]DDGUMP/OBJECT=[.
OUT.DEBUG.OBJ.GLIDE.GLIDE2X.CVG.GLIDE.SRC]DDGUMP.OBJ/INCLUDE_DIRECTORY=([.GLIDE
.SWLIBS.FXMISC],[.GLIDE.GLIDE2X.CVG.INCSRC],[.GLIDE.GLIDE2X.CVG.GLIDE.SRC],[.GL
IDE.GLIDE2X.CVG.INIT],[.GLIDE.SWLIBS.NEWPCI.PCILIB])/DEFINE=(CVG,GLIDE_USE_C_TR
ISETUP,GLIDE_HW_TRI_SETUP=1,GLIDE_TRI_CULLING=1,GLIDE_DEFAULT_GAMMA=1.3F,GLIDE_
LIB=1) [.GLIDE.GLIDE2X.CVG.GLIDE.SRC]DDGUMP.C

Hardware: /ARCHITECTURE=GENERIC /OPTIMIZE=TUNE=GENERIC

These macros are in effect at the start of the compilation.
----- ------ --- -- ------ -- --- ----- -- --- ------------

 __G_FLOAT=1  __DECC=1  vms=1  VMS=1  __32BITS=1  __PRAGMA_ENVIRONMENT=1 
 __CRTL_VER=80400000  __vms_version="V8.4-2L1"  CC$gfloat=1  __X_FLOAT=1 
 GLIDE_HW_TRI_SETUP=1  GLIDE_USE_C_TRISETUP=1  vms_version="V8.4-2L1" 
 __DATE__="May  9 2021"  __STDC_VERSION__=199901L  __DECC_MODE_RELAXED=1 
 __DECC_VER=70490002  __VMS=1  GLIDE_DEFAULT_GAMMA=1.3F  GLIDE_LIB=1 
 __ALPHA=1  VMS_VERSION="V8.4-2L1"  __IEEE_FLOAT=0  __VMS_VERSION="V8.4-2L1" 
 __TIME__="23:42:42"  __Alpha_AXP=1  __VMS_VER=80421222 
 __BIASED_FLT_ROUNDS=2  CVG=1  __INITIAL_POINTER_SIZE=0  __STDC__=2 
 __LANGUAGE_C__=1  __vms=1  __alpha=1  __D_FLOAT=0  GLIDE_TRI_CULLING=1 

