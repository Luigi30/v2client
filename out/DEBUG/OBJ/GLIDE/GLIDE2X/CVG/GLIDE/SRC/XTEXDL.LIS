XTEXDL                          Source Listing                   9-MAY-2021 23:43:12  VSI C V7.4-002-50R2O              Page 1
V1.0                                                             2-FEB-2021 02:11:10  xtexdl.c;1

	      1 /*
	      2 ** THIS SOFTWARE IS SUBJECT TO COPYRIGHT PROTECTION AND IS OFFERED ONLY
	      3 ** PURSUANT TO THE 3DFX GLIDE GENERAL PUBLIC LICENSE. THERE IS NO RIGHT
	      4 ** TO USE THE GLIDE TRADEMARK WITHOUT PRIOR WRITTEN PERMISSION OF 3DFX
	      5 ** INTERACTIVE, INC. A COPY OF THIS LICENSE MAY BE OBTAINED FROM THE 
	      6 ** DISTRIBUTOR OR BY CONTACTING 3DFX INTERACTIVE INC(info@3dfx.com). 
	      7 ** THIS PROGRAM IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER 
	      8 ** EXPRESSED OR IMPLIED. SEE THE 3DFX GLIDE GENERAL PUBLIC LICENSE FOR A
	      9 ** FULL TEXT OF THE NON-WARRANTY PROVISIONS.  
	     10 ** 
	     11 ** USE, DUPLICATION OR DISCLOSURE BY THE GOVERNMENT IS SUBJECT TO
	     12 ** RESTRICTIONS AS SET FORTH IN SUBDIVISION (C)(1)(II) OF THE RIGHTS IN
	     13 ** TECHNICAL DATA AND COMPUTER SOFTWARE CLAUSE AT DFARS 252.227-7013,
	     14 ** AND/OR IN SIMILAR OR SUCCESSOR CLAUSES IN THE FAR, DOD OR NASA FAR
	     15 ** SUPPLEMENT. UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT LAWS OF
	     16 ** THE UNITED STATES.  
	     17 ** 
	     18 ** COPYRIGHT 3DFX INTERACTIVE, INC. 1999, ALL RIGHTS RESERVED
	     19 **
	     20 ** Revision 1.1.2.1  2004/12/23 20:45:56  koolsmoky
	     21 ** converted to nasm syntax
	     22 ** added x86 asm, 3dnow! triangle and mmx, 3dnow! texture download optimizations
	     23 **
	     24 ** Revision 1.1.1.1  1999/12/07 21:42:38  joseph
	     25 ** Initial checkin into SourceForge.
	     26 **
	     27 ** 
	     28 ** 1     10/08/98 11:30a Brent
	     29 ** 
	     30 ** 2     10/05/98 7:43p Peter
	     31 ** 3DNow!(tm) happiness everywhere
	     32 ** 
	     33 ** 1     10/03/98 3:37p Peter
	     34 ** Texture download vectors
	     35 **
	     36 */
	     37 
	     38 #include <3dfx.h>
	    169 #define FX_DLL_DEFINITION
	    170 #include <fxdll.h>
	    291 #include <glide.h>
	   2233 #include "fxglide.h"
	  14125 
	  14126 void FX_CSTYLE
	  14127 _grTexDownload_Default_8_1(struct GrGC_s* gc, const FxU32 tmuBaseAddr,
	  14128 			   const FxU32 maxS, const FxU32 minT, const FxU32 maxT,
	  14129                            void* texData)
      1	  14130 {
      1	  14131 #define FN_NAME "_grTexDownload_Default_8_1"
      1	  14132   FxU32 
      1	  14133     t = minT,
      1	  14134     tex_address = tmuBaseAddr + TEX_ROW_ADDR_INCR(t);
      1	  14135   const FxU8
      1	  14136     *src8  = (const FxU8*)texData;
      1	  14137   
      2	  14138   for (; t <= maxT; t++) {
      3	  14139     LINEAR_WRITE_BEGIN(1, kLinearWriteTex, 

XTEXDL                          Source Listing                   9-MAY-2021 23:43:12  VSI C V7.4-002-50R2O              Page 2
V1.0                                                             2-FEB-2021 02:11:10  xtexdl.c;1

      3	  14140                        (FxU32)tex_address - (FxU32)gc->tex_ptr,
      3	  14141                        0x00UL, 0x00UL);
      3	  14142     LINEAR_WRITE_SET_8(tex_address, (const FxU32)*(const FxU8*)src8);
      2	  14143     LINEAR_WRITE_END();
      2	  14144     
      2	  14145     src8 += 1;
      2	  14146     tex_address += TEX_ROW_ADDR_INCR(1);
      1	  14147   }
      1	  14148 #undef FN_NAME
      1	  14149 }
	  14150 
	  14151 void FX_CSTYLE
	  14152 _grTexDownload_Default_8_2(struct GrGC_s* gc, const FxU32 tmuBaseAddr,
	  14153                            const FxU32 maxS, const FxU32 minT, const FxU32 maxT,
	  14154                            void* texData)
      1	  14155 {
      1	  14156 #define FN_NAME "_grTexDownload_Default_8_2"
      1	  14157   FxU32 
      1	  14158     t = minT,
      1	  14159     tex_address = tmuBaseAddr + TEX_ROW_ADDR_INCR(t);
      1	  14160   const FxU8
      1	  14161     *src8  = (const FxU8*)texData;
      1	  14162   
      2	  14163   for (; t <= maxT; t++) {
      3	  14164     LINEAR_WRITE_BEGIN(1, kLinearWriteTex, 
      3	  14165                        (FxU32)tex_address - (FxU32)gc->tex_ptr,
      3	  14166                        0x00UL, 0x00UL);
      3	  14167     LINEAR_WRITE_SET_8(tex_address, (const FxU32)*(const FxU16*)src8);
      2	  14168     LINEAR_WRITE_END();
      2	  14169     
      2	  14170     src8 += 2;
      2	  14171     tex_address += TEX_ROW_ADDR_INCR(1);
      1	  14172   }
      1	  14173 #undef FN_NAME
      1	  14174 }
	  14175 
	  14176 void FX_CSTYLE
	  14177 _grTexDownload_Default_8_4(struct GrGC_s* gc, const FxU32 tmuBaseAddr,
	  14178 			   const FxU32 maxS, const FxU32 minT, const FxU32 maxT,
	  14179                            void* texData)
      1	  14180 {
      1	  14181 #define FN_NAME "_grTexDownload_Default_8_4"
      1	  14182   FxU32 
      1	  14183     t = minT,
      1	  14184     tex_address = tmuBaseAddr + TEX_ROW_ADDR_INCR(t);
      1	  14185   const FxU8
      1	  14186     *src8  = (const FxU8*)texData;
      1	  14187   
      2	  14188   for (; t <= maxT; t++) {
      3	  14189     LINEAR_WRITE_BEGIN(1, kLinearWriteTex, 
      3	  14190                        (FxU32)tex_address - (FxU32)gc->tex_ptr,
      3	  14191                        0x00UL, 0x00UL);
      3	  14192     LINEAR_WRITE_SET_8(tex_address, *(const FxU32*)src8);
      2	  14193     LINEAR_WRITE_END();
      2	  14194     
      2	  14195     src8 += 4;
      2	  14196     tex_address += TEX_ROW_ADDR_INCR(1);

XTEXDL                          Source Listing                   9-MAY-2021 23:43:12  VSI C V7.4-002-50R2O              Page 3
V1.0                                                             2-FEB-2021 02:11:10  xtexdl.c;1

      1	  14197   }
      1	  14198 #undef FN_NAME
      1	  14199 }
	  14200 
	  14201 void FX_CSTYLE
	  14202 _grTexDownload_Default_8_WideS(struct GrGC_s* gc, const FxU32 tmuBaseAddr,
	  14203 			       const FxU32 maxS, const FxU32 minT, const FxU32 maxT,
	  14204 			       void* texData)
      1	  14205 {
      1	  14206 #define FN_NAME "_grTexDownload_Default_8_WideS"
      1	  14207   FxU32 
      1	  14208     t = minT,
      1	  14209     tex_address;
      1	  14210   const FxU8
      1	  14211     *src8  = (const FxU8*)texData;
      1	  14212   
      2	  14213   for (; t <= maxT; t++) {
      2	  14214     tex_address = tmuBaseAddr + TEX_ROW_ADDR_INCR(t);
      2	  14215     
      3	  14216     LINEAR_WRITE_BEGIN(maxS, kLinearWriteTex,
      3	  14217                        (FxU32)tex_address - (FxU32)gc->tex_ptr,
      3	  14218                        0x00UL, 0x00UL);
      4	  14219     {
      4	  14220       FxU32 s;
      4	  14221       
      5	  14222       for (s = 0; s < maxS; s += 2) {
      5	  14223         const FxU32 t0 = *(const FxU32*)(src8   );
      5	  14224         const FxU32 t1 = *(const FxU32*)(src8 + sizeof(FxU32));
      5	  14225         
      5	  14226         LINEAR_WRITE_SET_8(tex_address                , t0);
      5	  14227         LINEAR_WRITE_SET_8(tex_address + sizeof(FxU32), t1);
      5	  14228         
      5	  14229         src8 += 8;
      5	  14230         tex_address += (sizeof(FxU32) << 1);
      4	  14231       }
      3	  14232     }
      2	  14233     LINEAR_WRITE_END();
      1	  14234   }
      1	  14235 #undef FN_NAME
      1	  14236 }
	  14237 
	  14238 extern void FX_CSTYLE
	  14239 _grTexDownload_Default_16_1(struct GrGC_s* gc, const FxU32 tmuBaseAddr,
	  14240 			    const FxU32 maxS, const FxU32 minT, const FxU32 maxT,
	  14241                             void* texData)
      1	  14242 {
      1	  14243 #define FN_NAME "_grTexDownload_Default_16_1"
      1	  14244   FxU32 
      1	  14245     t = minT,
      1	  14246     tex_address = tmuBaseAddr + TEX_ROW_ADDR_INCR(t);
      1	  14247   const FxU16
      1	  14248     *src16 = (const FxU16*)texData;
      1	  14249 
      2	  14250   for (; t <= maxT; t++) {
      3	  14251     LINEAR_WRITE_BEGIN(1, kLinearWriteTex,
      3	  14252                        (FxU32)tex_address - (FxU32)gc->tex_ptr,
      3	  14253                        0x00UL, 0x00UL);

XTEXDL                          Source Listing                   9-MAY-2021 23:43:12  VSI C V7.4-002-50R2O              Page 4
V1.0                                                             2-FEB-2021 02:11:10  xtexdl.c;1

      3	  14254     LINEAR_WRITE_SET_16(tex_address, (const FxU32)*(const FxU16*)src16);
      2	  14255     LINEAR_WRITE_END();
      2	  14256     
      2	  14257     src16 += 1;
      2	  14258     tex_address += TEX_ROW_ADDR_INCR(1);
      1	  14259   }
      1	  14260 #undef FN_NAME
      1	  14261 }
	  14262 
	  14263 extern void FX_CSTYLE
	  14264 _grTexDownload_Default_16_2(struct GrGC_s* gc, const FxU32 tmuBaseAddr,
	  14265 			    const FxU32 maxS, const FxU32 minT, const FxU32 maxT,
	  14266                             void* texData)
      1	  14267 {
      1	  14268 #define FN_NAME "_grTexDownload_Default_16_2"
      1	  14269   FxU32 
      1	  14270     t = minT,
      1	  14271     tex_address = tmuBaseAddr + TEX_ROW_ADDR_INCR(t);
      1	  14272   const FxU16
      1	  14273     *src16 = (const FxU16*)texData;
      1	  14274 
      2	  14275   for (; t <= maxT; t++) {
      3	  14276     LINEAR_WRITE_BEGIN(1, kLinearWriteTex,
      3	  14277                        (FxU32)tex_address - (FxU32)gc->tex_ptr,
      3	  14278                        0x00UL, 0x00UL);
      3	  14279     LINEAR_WRITE_SET_16(tex_address, *(const FxU32*)src16);
      2	  14280     LINEAR_WRITE_END();
      2	  14281     
      2	  14282     src16 += 2;
      2	  14283     tex_address += TEX_ROW_ADDR_INCR(1);
      1	  14284   }
      1	  14285 #undef FN_NAME
      1	  14286 }
	  14287 
	  14288 extern void FX_CSTYLE
	  14289 _grTexDownload_Default_16_WideS(struct GrGC_s* gc, const FxU32 tmuBaseAddr,
	  14290 				const FxU32 maxS, const FxU32 minT, const FxU32 maxT,
	  14291 				void* texData)
      1	  14292 {
      1	  14293 #define FN_NAME "_grTexDownload_Default_16_WideS"
      1	  14294   FxU32 
      1	  14295     t = minT,
      1	  14296     tex_address;
      1	  14297   const FxU16
      1	  14298     *src16 = (const FxU16*)texData;
      1	  14299   
      2	  14300   for (; t <= maxT; t++) {
      2	  14301     tex_address = tmuBaseAddr + TEX_ROW_ADDR_INCR(t);
      2	  14302     
      2	  14303     /* Loop unrolled to process 2 dwords per iteration */            
      3	  14304     LINEAR_WRITE_BEGIN(maxS, kLinearWriteTex,
      3	  14305                        (FxU32)tex_address - (FxU32)gc->tex_ptr,
      3	  14306                        0x00UL, 0x00UL);
      4	  14307     {
      4	  14308       FxU32 s;
      4	  14309       
      5	  14310       for (s = 0; s < maxS; s += 2) {

XTEXDL                          Source Listing                   9-MAY-2021 23:43:12  VSI C V7.4-002-50R2O              Page 5
V1.0                                                             2-FEB-2021 02:11:10  xtexdl.c;1

      5	  14311         const FxU32 t0 = *(const FxU32*)(src16   );
      5	  14312         const FxU32 t1 = *(const FxU32*)(src16 + 2);
      5	  14313         
      5	  14314         GDBG_INFO(195, "s = %d, t= %d, address = 0x%x\n",
      5	  14315                   s, t, (FxU32) tex_address - (FxU32) gc->tex_ptr + 0x200000);
      5	  14316         LINEAR_WRITE_SET_16(tex_address    , t0);
      5	  14317         LINEAR_WRITE_SET_16(tex_address + 4, t1);
      5	  14318         
      5	  14319         tex_address += 8;
      5	  14320         src16 += 4;
      4	  14321       }
      3	  14322     }
      2	  14323     LINEAR_WRITE_END();
      1	  14324   }
      1	  14325 #undef FN_NAME
      1	  14326 }


Command Line
------- ----

CC/DEBUG/NOOP/LIST=[.OUT.DEBUG.OBJ.GLIDE.GLIDE2X.CVG.GLIDE.SRC]XTEXDL/OBJECT=[.
OUT.DEBUG.OBJ.GLIDE.GLIDE2X.CVG.GLIDE.SRC]XTEXDL.OBJ/INCLUDE_DIRECTORY=([.GLIDE
.SWLIBS.FXMISC],[.GLIDE.GLIDE2X.CVG.INCSRC],[.GLIDE.GLIDE2X.CVG.GLIDE.SRC],[.GL
IDE.GLIDE2X.CVG.INIT],[.GLIDE.SWLIBS.NEWPCI.PCILIB])/DEFINE=(CVG,GLIDE_USE_C_TR
ISETUP,GLIDE_HW_TRI_SETUP=1,GLIDE_TRI_CULLING=1,GLIDE_DEFAULT_GAMMA=1.3F,GLIDE_
LIB=1) [.GLIDE.GLIDE2X.CVG.GLIDE.SRC]XTEXDL.C

Hardware: /ARCHITECTURE=GENERIC /OPTIMIZE=TUNE=GENERIC

These macros are in effect at the start of the compilation.
----- ------ --- -- ------ -- --- ----- -- --- ------------

 __G_FLOAT=1  __DECC=1  vms=1  VMS=1  __32BITS=1  __PRAGMA_ENVIRONMENT=1 
 __CRTL_VER=80400000  __vms_version="V8.4-2L1"  CC$gfloat=1  __X_FLOAT=1 
 GLIDE_HW_TRI_SETUP=1  GLIDE_USE_C_TRISETUP=1  vms_version="V8.4-2L1" 
 __DATE__="May  9 2021"  __STDC_VERSION__=199901L  __DECC_MODE_RELAXED=1 
 __DECC_VER=70490002  __VMS=1  GLIDE_DEFAULT_GAMMA=1.3F  GLIDE_LIB=1 
 __ALPHA=1  VMS_VERSION="V8.4-2L1"  __IEEE_FLOAT=0  __VMS_VERSION="V8.4-2L1" 
 __TIME__="23:43:12"  __Alpha_AXP=1  __VMS_VER=80421222 
 __BIASED_FLT_ROUNDS=2  CVG=1  __INITIAL_POINTER_SIZE=0  __STDC__=2 
 __LANGUAGE_C__=1  __vms=1  __alpha=1  __D_FLOAT=0  GLIDE_TRI_CULLING=1 

