FXOVMS                          Source Listing                  10-MAY-2021 00:35:28  VSI C V7.4-002-50R2O              Page 1
V1.0                                                            10-MAY-2021 00:09:06  fxovms.c;8

	      1 #include "fxovms.h"
	  28244 
	  28245 static char pciIdentVMS[] = "@#% fxPCI for OpenVMS";
	  28246 
	  28247 static FxBool pciInitializeVMS(void);
	  28248 static FxBool pciShutdownVMS(void);
	  28249 static const char* pciIdentifierVMS(void);
	  28250 
	  28251 static FxU8  pciPortInByteVMS(FxU16 port);
	  28252 static FxU16 pciPortInWordVMS(FxU16 port);
	  28253 static FxU32 pciPortInLongVMS(FxU16 port);
	  28254   
	  28255 static FxBool pciPortOutByteVMS(FxU16 port, FxU8 data);
	  28256 static FxBool pciPortOutWordVMS(FxU16 port, FxU16 data);
	  28257 static FxBool pciPortOutLongVMS(FxU16 port, FxU32 data);
	  28258 
	  28259 static FxBool pciMapLinearVMS(FxU32 busNumber, FxU32 physAddr,
	  28260                              unsigned long* linearAddr, FxU32* length);
	  28261 static FxBool pciUnmapLinearVMS(unsigned long linearAddr, FxU32 length);
	  28262 
	  28263 static FxBool pciSetPermissionVMS(const unsigned long addrBase, const FxU32 addrLen,
	  28264                                  const FxBool writePermP);
	  28265 
	  28266 static FxBool pciMsrGetVMS(MSRInfo* in, MSRInfo* out);
	  28267 static FxBool pciMsrSetVMS(MSRInfo* in, MSRInfo* out);
	  28268 
	  28269 static FxBool pciOutputStringVMS(const char* msg);
	  28270 static FxBool pciSetPassThroughBaseVMS(FxU32* baseAddr, FxU32 baseAddrLen);
	  28271 
	  28272 
	  28273 const FxPlatformIOProcs ioProcsVMS = {
	  28274   pciInitializeVMS,
	  28275   pciShutdownVMS,
	  28276   pciIdentifierVMS,
	  28277 
	  28278   pciPortInByteVMS,
	  28279   pciPortInWordVMS,
	  28280   pciPortInLongVMS,
	  28281 
	  28282   pciPortOutByteVMS,
	  28283   pciPortOutWordVMS,
	  28284   pciPortOutLongVMS,
	  28285 
	  28286   pciMapLinearVMS,
	  28287   pciUnmapLinearVMS,
	  28288   pciSetPermissionVMS,
	  28289 
	  28290   pciMsrGetVMS,
	  28291   pciMsrSetVMS,
	  28292 
	  28293   pciOutputStringVMS,
	  28294   pciSetPassThroughBaseVMS
	  28295 };
	  28296 
	  28297 static $DESCRIPTOR (voodoo2_dev, "FXA0:");
	  28298 static unsigned short int channel;
	  28299 

FXOVMS                          Source Listing                  10-MAY-2021 00:35:28  VSI C V7.4-002-50R2O              Page 2
V1.0                                                            10-MAY-2021 00:09:06  fxovms.c;8

	  28300 FxBool
	  28301 pciPlatformInit(void)
      1	  28302 {
      1	  28303   gCurPlatformIO = &ioProcsVMS;
      1	  28304   return FXTRUE;
      1	  28305 }
	  28306 
	  28307 /* I/O procedures */
	  28308 static FxBool pciInitializeVMS(void)
      1	  28309 {
      1	  28310     sys$assign(&voodoo2_dev, &channel, 0, 0, 0);
      1	  28311     return FXTRUE;
      1	  28312 }
	  28313 static FxBool pciShutdownVMS(void)
      1	  28314 {
      1	  28315     sys$dassgn(channel);
      1	  28316     return FXTRUE;
      1	  28317 }
	  28318 static const char* pciIdentifierVMS(void)
      1	  28319 {
      1	  28320     return pciIdentVMS;
      1	  28321 }
	  28322 
	  28323 static FxU8  pciPortInByteVMS(FxU16 port)
      1	  28324 {
      1	  28325     printf("pciPortInByteVMS! port %04X data %08X\n", port);
      1	  28326 
      1	  28327     //assert(FALSE);
      1	  28328     return 0;
      1	  28329 }
	  28330 static FxU16 pciPortInWordVMS(FxU16 port)
      1	  28331 {
      1	  28332     printf("pciPortInWordVMS! port %04X data %08X\n", port);
      1	  28333 
      1	  28334     //assert(FALSE);
      1	  28335     return 0;
      1	  28336 }
	  28337 static FxU32 pciPortInLongVMS(FxU16 port)
      1	  28338 {
      1	  28339     printf("pciPortInLongVMS! port %04X data %08X\n", port);
      1	  28340 
      1	  28341     //assert(FALSE);
      1	  28342     return 0;
      1	  28343 }
	  28344   
	  28345 static FxBool pciPortOutByteVMS(FxU16 port, FxU8 data)
      1	  28346 {
      1	  28347     printf("pciPortOutByteVMS! port %04X data %08X\n", port, data);
      1	  28348 
      1	  28349     //assert(FALSE);
      1	  28350     return 0;
      1	  28351 }
	  28352 static FxBool pciPortOutWordVMS(FxU16 port, FxU16 data)
      1	  28353 {
      1	  28354     printf("pciPortOutWordVMS! port %04X data %08X\n", port, data);
      1	  28355 
      1	  28356     //assert(FALSE);

FXOVMS                          Source Listing                  10-MAY-2021 00:35:28  VSI C V7.4-002-50R2O              Page 3
V1.0                                                            10-MAY-2021 00:09:06  fxovms.c;8

      1	  28357     return 0;
      1	  28358 }
	  28359 static FxBool pciPortOutLongVMS(FxU16 port, FxU32 data)
      1	  28360 {
      1	  28361     printf("pciPortOutLongVMS! port %04X data %08X\n", port, data);
      1	  28362 
      1	  28363     //assert(FALSE);
      1	  28364     return 0;
      1	  28365 }
	  28366 
	  28367 static FxBool pciMapLinearVMS(FxU32 busNumber, FxU32 physAddr,
	  28368                              unsigned long* linearAddr, FxU32* length)
      1	  28369 {
      1	  28370     uint32 buf;
      1	  28371     // Make an I/O call to the driver and fetch the linear base.
      1	  28372     sys$qiow(0,
      1	  28373         channel,
      1	  28374         IO$_ACCESS,
      1	  28375         NULL,
      1	  28376         0,
      1	  28377         0,
      1	  28378         (void *)&buf,
      1	  28379         0,
      1	  28380         4,
      1	  28381         0,
      1	  28382         0,
      1	  28383         0);
      1	  28384 
      1	  28385     *linearAddr = buf;
      1	  28386     *length = 1048576*16;
      1	  28387     return FXTRUE;
      1	  28388 }
	  28389 static FxBool pciUnmapLinearVMS(unsigned long linearAddr, FxU32 length)
      1	  28390 {
      1	  28391     // done by the kernel
      1	  28392     return FXTRUE;
      1	  28393 }
	  28394 
	  28395 static FxBool pciSetPermissionVMS(const unsigned long addrBase, const FxU32 addrLen,
	  28396                                  const FxBool writePermP)
      1	  28397 {
      1	  28398     // done by the kernel
      1	  28399     return 0;
      1	  28400 }
	  28401 
	  28402 static FxBool pciMsrGetVMS(MSRInfo* in, MSRInfo* out)
      1	  28403 {
      1	  28404     //assert(FALSE);
      1	  28405     return 0;
      1	  28406 }
	  28407 static FxBool pciMsrSetVMS(MSRInfo* in, MSRInfo* out)
      1	  28408 {
      1	  28409     //assert(FALSE);
      1	  28410     return 0;
      1	  28411 }
	  28412 
	  28413 static FxBool pciOutputStringVMS(const char* msg)

FXOVMS                          Source Listing                  10-MAY-2021 00:35:28  VSI C V7.4-002-50R2O              Page 4
V1.0                                                            10-MAY-2021 00:09:06  fxovms.c;8

      1	  28414 {
      1	  28415     printf(msg);   
      1	  28416     return FXTRUE; 
      1	  28417 }
	  28418 static FxBool pciSetPassThroughBaseVMS(FxU32* baseAddr, FxU32 baseAddrLen)
      1	  28419 {
      1	  28420     return FXFALSE; // not on VMS
      1	  28421 }


Command Line
------- ----

CC/DEBUG/NOOP/LIST=[.OUT.DEBUG.OBJ.GLIDE.SWLIBS.NEWPCI.PCILIB]FXOVMS/OBJECT=[.O
UT.DEBUG.OBJ.GLIDE.SWLIBS.NEWPCI.PCILIB]FXOVMS.OBJ/INCLUDE_DIRECTORY=([.GLIDE.S
WLIBS.FXMISC],[.GLIDE.GLIDE2X.CVG.INCSRC],[.GLIDE.GLIDE2X.CVG.GLIDE.SRC],[.GLID
E.GLIDE2X.CVG.INIT],[.GLIDE.SWLIBS.NEWPCI.PCILIB])/DEFINE=(CVG,GLIDE_USE_C_TRIS
ETUP,GLIDE_HW_TRI_SETUP=1,GLIDE_TRI_CULLING=1,GLIDE_DEFAULT_GAMMA=1.3F,GLIDE_LI
B=1) [.GLIDE.SWLIBS.NEWPCI.PCILIB]FXOVMS.C

Hardware: /ARCHITECTURE=GENERIC /OPTIMIZE=TUNE=GENERIC

These macros are in effect at the start of the compilation.
----- ------ --- -- ------ -- --- ----- -- --- ------------

 __G_FLOAT=1  __DECC=1  vms=1  VMS=1  __32BITS=1  __PRAGMA_ENVIRONMENT=1 
 __CRTL_VER=80400000  __vms_version="V8.4-2L1"  CC$gfloat=1  __X_FLOAT=1 
 GLIDE_HW_TRI_SETUP=1  GLIDE_USE_C_TRISETUP=1  vms_version="V8.4-2L1" 
 __DATE__="May 10 2021"  __STDC_VERSION__=199901L  __DECC_MODE_RELAXED=1 
 __DECC_VER=70490002  __VMS=1  GLIDE_DEFAULT_GAMMA=1.3F  GLIDE_LIB=1 
 __ALPHA=1  VMS_VERSION="V8.4-2L1"  __IEEE_FLOAT=0  __VMS_VERSION="V8.4-2L1" 
 __TIME__="00:35:29"  __Alpha_AXP=1  __VMS_VER=80421222 
 __BIASED_FLT_ROUNDS=2  CVG=1  __INITIAL_POINTER_SIZE=0  __STDC__=2 
 __LANGUAGE_C__=1  __vms=1  __alpha=1  __D_FLOAT=0  GLIDE_TRI_CULLING=1 

