GERROR                          Source Listing                   9-MAY-2021 23:42:55  VSI C V7.4-002-50R2O              Page 1
V1.0                                                             2-FEB-2021 02:11:10  gerror.c;1

	      1 /*
	      2 ** THIS SOFTWARE IS SUBJECT TO COPYRIGHT PROTECTION AND IS OFFERED ONLY
	      3 ** PURSUANT TO THE 3DFX GLIDE GENERAL PUBLIC LICENSE. THERE IS NO RIGHT
	      4 ** TO USE THE GLIDE TRADEMARK WITHOUT PRIOR WRITTEN PERMISSION OF 3DFX
	      5 ** INTERACTIVE, INC. A COPY OF THIS LICENSE MAY BE OBTAINED FROM THE 
	      6 ** DISTRIBUTOR OR BY CONTACTING 3DFX INTERACTIVE INC(info@3dfx.com). 
	      7 ** THIS PROGRAM IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER 
	      8 ** EXPRESSED OR IMPLIED. SEE THE 3DFX GLIDE GENERAL PUBLIC LICENSE FOR A
	      9 ** FULL TEXT OF THE NON-WARRANTY PROVISIONS.  
	     10 ** 
	     11 ** USE, DUPLICATION OR DISCLOSURE BY THE GOVERNMENT IS SUBJECT TO
	     12 ** RESTRICTIONS AS SET FORTH IN SUBDIVISION (C)(1)(II) OF THE RIGHTS IN
	     13 ** TECHNICAL DATA AND COMPUTER SOFTWARE CLAUSE AT DFARS 252.227-7013,
	     14 ** AND/OR IN SIMILAR OR SUCCESSOR CLAUSES IN THE FAR, DOD OR NASA FAR
	     15 ** SUPPLEMENT. UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT LAWS OF
	     16 ** THE UNITED STATES.  
	     17 ** 
	     18 ** COPYRIGHT 3DFX INTERACTIVE, INC. 1999, ALL RIGHTS RESERVED
	     19 **
	     20 ** 28    3/14/98 1:07p Peter
	     21 ** mac port happiness
	     22 ** 
	     23 ** 27    2/11/98 5:23p Peter
	     24 ** no more infinite recursion
	     25  * 
	     26  * 26    12/18/97 2:13p Peter
	     27  * cleaned up the error code
	     28  * 
	     29  * 25    12/09/97 12:20p Peter
	     30  * mac glide port
	     31  * 
	     32  * 24    12/05/97 4:38p Peter
	     33  * sli vs assertions
	     34  * 
	     35  * 23    12/03/97 11:34a Peter
	     36  * dos debugging
	     37  * 
	     38  * 22    11/17/97 4:55p Peter
	     39  * watcom warnings/chipfield stuff
	     40  * 
	     41  * 21    11/15/97 8:55p Peter
	     42  * Removed OutputDebugString
	     43  * 
	     44  * 20    11/15/97 7:43p Peter
	     45  * more comdex silliness
	     46  * 
	     47  * 19    11/12/97 2:27p Peter
	     48  * 
	     49  * 18    11/12/97 11:16a Peter
	     50  * cleaned up assertions
	     51  * 
	     52  * 17    11/04/97 5:04p Peter
	     53  * cataclysm part deux
	     54  * 
	     55  * 16    11/03/97 4:02p Peter
	     56  * cataclysm fix
	     57  * 

GERROR                          Source Listing                   9-MAY-2021 23:42:55  VSI C V7.4-002-50R2O              Page 2
V1.0                                                             2-FEB-2021 02:11:10  gerror.c;1

	     58  * 15    11/03/97 3:43p Peter
	     59  * h3/cvg cataclysm
	     60  * 
	     61  * 14    10/23/97 5:28p Peter
	     62  * sli fifo thing
	     63  * 
	     64  * 13    9/24/97 1:29p Peter
	     65  * more assertion spewage
	     66  * 
	     67  * 12    9/05/97 5:29p Peter
	     68  * changes for direct hw
	     69  * 
	     70  * 11    5/30/97 5:44p Peter
	     71  * Version that does basic triangles/registers w/ command fifo. Does not
	     72  * currently download textures correctly.
	     73  * 
	     74  * 10    5/28/97 9:05a Peter
	     75  * Merge w/ latest glide changes
	     76  * 
	     77  * 9     5/27/97 1:16p Peter
	     78  * Basic cvg, w/o cmd fifo stuff. 
	     79  * 
	     80  * 8     5/21/97 6:05a Peter
	     81  * 
	     82  * 7     5/20/97 9:47a Pgj
	     83  * Use OutputDebugString for non-fatal errors under windows
	     84  * 
	     85  * 6     5/19/97 7:35p Pgj
	     86  * Print cogent error message if h/w not found
	     87  * 
	     88  * 5     3/09/97 10:31a Dow
	     89  * Added GR_DIENTRY for di glide functions
	     90  * 
	     91  * 4     12/23/96 1:37p Dow
	     92  * chagnes for multiplatform glide
	     93 **
	     94 */
	     95 #include <stdio.h>
       X   1706 #ifdef __DOS__
       X   1707 #  include <malloc.h>
       X   1708 #endif
	   1709 
       X   1710 #ifdef __WIN32__
       X   1711 #  include <windows.h>
       X   1712 #endif
	   1713 
	   1714 #include <3dfx.h>
	   1845 #define FX_DLL_DEFINITION
	   1846 #include <fxdll.h>
	   1967 #include <glide.h>
	   3909 #include "fxglide.h"
	  14191 
	  14192 void (*GrErrorCallback)( const char *string, FxBool fatal );
	  14193 
	  14194 void _doGrErrorCallback( const char *name, const char *msg, FxBool fatal )
      1	  14195 {
      1	  14196   char buf[1024];

GERROR                          Source Listing                   9-MAY-2021 23:42:55  VSI C V7.4-002-50R2O              Page 3
V1.0                                                             2-FEB-2021 02:11:10  gerror.c;1

      1	  14197 
      1X  14198 #if GDBG_INFO_ON
      1	  14199   /* Neuter any fifo checking from the failing
      1	  14200    * call. Otherwise entries into the shutdown
      1	  14201    * calls cause spurious crap.
      1X  14202    */
      1X  14203   if (fatal) {
      1X  14204     GR_DCL_GC;
      1X  14205 
      1X  14206     gc->checkCounter     =
      1X  14207     gc->expected_counter = 0;
      1X  14208 
      1X  14209     gc->checkCounter =
      1X  14210     gc->checkPtr     = 0UL;
      1X  14211   }
      1X  14212 #endif /* GDBG_INFO_ON */
      1	  14213 
      1	  14214   gdbg_printf("%s: %s.\n", name, msg);
      1	  14215   sprintf(buf,"%s: %s.\n", name, msg);
      1	  14216   GrErrorCallback(buf, fatal);
      1	  14217 
      1	  14218   if (fatal) exit(1);
      1	  14219 }
	  14220 
	  14221 GR_DIENTRY(grErrorSetCallback, void,
	  14222            ( void (*function) ( const char *string, FxBool fatal ) ))
      1	  14223 {
      1	  14224   GDBG_INFO(80,"grErrorSetCallback(0x%x)",function);
      1	  14225   GrErrorCallback = function;
      1	  14226 }
	  14227 
       X  14228 #ifdef __WIN32__
       X  14229 void
       X  14230 _grErrorWindowsCallback( const char *s, FxBool fatal )
       X  14231 {
       X  14232   if ( fatal ) {
       X  14233     GDBG_ERROR("glide", s);
       X  14234     grGlideShutdown();
       X  14235     MessageBox(NULL, s, NULL, MB_OK);
       X  14236   }
       X  14237 }
       X  14238 #endif
	  14239 
	  14240 void
	  14241 _grErrorDefaultCallback( const char *s, FxBool fatal )
      1	  14242 {
      2	  14243   if ( fatal ) {
      2	  14244     GDBG_ERROR("glide",s);
      2	  14245     grGlideShutdown();
      2	  14246 
      2X  14247 #if (GLIDE_PLATFORM & GLIDE_OS_MACOS)
      2X  14248 		{
      2X  14249 			Str255 errBuf;
      2X  14250 			
      2X  14251 			errBuf[0] = sprintf((char*)(errBuf + 1), "%s", s);
      2X  14252 			DebugStr(errBuf);
      2X  14253 		}

GERROR                          Source Listing                   9-MAY-2021 23:42:55  VSI C V7.4-002-50R2O              Page 4
V1.0                                                             2-FEB-2021 02:11:10  gerror.c;1

      2X  14254 #endif /* (GLIDE_PLATFORM * GLIDE_OS_MACOS) */
      1	  14255   }
      1	  14256 }
	  14257 
       X  14258 #if defined(__DOS__) && defined(__WATCOMC__)
       X  14259 int _guHeapCheck( void )
       X  14260 {
       X  14261   int i = _heapchk();
       X  14262 
       X  14263   if ( i != _HEAPOK )
       X  14264     printf( "heapchk: %d\n", i );
       X  14265 
       X  14266   return ( i == 0 );
       X  14267 }
       X  14268 #endif
	  14269 
	  14270 void
	  14271 _grAssert(char *exp, char *fileName, int lineNo)
      1	  14272 {
      1	  14273   GR_DCL_GC;
      1	  14274   GR_DCL_HW;
      1	  14275 
      1	  14276   /* No recursive re-entry thank you very much */
      2	  14277   {
      2	  14278     static FxBool inProcP = FXFALSE;
      2	  14279     if (inProcP) return;
      2	  14280     inProcP = FXTRUE;
      1	  14281   }
      1	  14282 
      1	  14283   /* dpc - 28 may 1997 - FixMe!
      1	  14284    * What to do here?
      1	  14285    */
      1X  14286 #if GLIDE_INIT_HAL
      1X  14287 
      1X  14288 #else /* !GLIDE_INIT_HAL */
      1	  14289   /* initRestoreVideo(); */
      1	  14290   sst1InitShutdown(gc->base_ptr);
      1	  14291 #endif /* !GLIDE_INIT_HAL */
      1	  14292 
      1	  14293   gdbg_printf("ASSERTION FAILED:\n");
      1	  14294   gdbg_printf("\tExpression:   %s\n", exp);
      1	  14295   gdbg_printf("\tFile:         %s\n", fileName);
      1	  14296   gdbg_printf("\tLine:         %d\n", lineNo);
      1	  14297 
      1X  14298 #if (GLIDE_PLATFORM & GLIDE_HW_CVG) && USE_PACKET_FIFO
      1	  14299   /* Spew about the state of the fifo since that's what most of the
      1	  14300    * assertions are about anyway.  
      1X  14301    */
      1X  14302   {    
      1X  14303     gdbg_printf("Command Fifo:\n");
      1X  14304     gdbg_printf("\tfifoPtr:    0x%X\n"
      1X  14305                 "\tfifoParams: 0x%X : (0x%X : 0x%X)\n"
      1X  14306                 "\tfifoRoom:  0x%X : (0x%X : 0x%X)\n"
      1X  14307                 "\tfifo hw: (0x%X : 0x%X) : (0x%X : 0x%X : 0x%X)\n"
      1X  14308                 "\tStatus: 0x%X\n",
      1X  14309                 gc->cmdTransportInfo.fifoPtr,
      1X  14310                 gc->cmdTransportInfo.fifoStart, gc->cmdTransportInfo.fifoEnd,

GERROR                          Source Listing                   9-MAY-2021 23:42:55  VSI C V7.4-002-50R2O              Page 5
V1.0                                                             2-FEB-2021 02:11:10  gerror.c;1

      1X  14311                 gc->cmdTransportInfo.fifoSize, 
      1X  14312                 gc->cmdTransportInfo.fifoRoom, 
      1X  14313                 gc->cmdTransportInfo.roomToReadPtr, gc->cmdTransportInfo.roomToEnd,
      1X  14314                 HW_FIFO_PTR(FXTRUE), gc->cmdTransportInfo.fifoRead, 
      1X  14315                 GR_GET(hw->cmdFifoDepth), GR_GET(hw->cmdFifoHoles), GR_GET(hw->cmdFifoBase),
      1X  14316                 GR_GET(hw->status));
      1X  14317 
      1X  14318 #if !GLIDE_INIT_HAL
      1X  14319     if (gc->scanline_interleaved) {
      1X  14320       SstRegs* slaveHw = (SstRegs*)gc->slave_ptr;
      1X  14321       slaveHw = slaveHw;	// FIXME: Below might not exist. *sigh*
      1X  14322       
      1X  14323       GDBG_INFO_MORE(gc->myLevel, "\tsli: 0x%X : (0x%X : 0x%X : 0x%X)\n",
      1X  14324                      HW_FIFO_PTR(FXFALSE), 
      1X  14325                      GR_GET(slaveHw->cmdFifoDepth), 
      1X  14326                      GR_GET(slaveHw->cmdFifoHoles), 
      1X  14327                      GR_GET(slaveHw->status));
      1X  14328     }
      1X  14329 #endif /* !GLIDE_INIT_HAL */
      1X  14330 
      1X  14331 #if GLIDE_USE_SHADOW_FIFO
      1X  14332     if (gc->cmdTransportInfo.fifoShadowBase != NULL) {
      1X  14333       const FxU32* fifoPtr = gc->cmdTransportInfo.fifoShadowBase;
      1X  14334 
      1X  14335       GDBG_PRINTF("Shadow Fifo: 0x%X\n", gc->cmdTransportInfo.fifoShadowPtr);
      1X  14336 
      1X  14337 #if 0
      1X  14338       while(fifoPtr != gc->cmdTransportInfo.fifoShadowPtr) GDBG_PRINTF("0x%X\n", *fifoPtr++);
      1X  14339       GDBG_PRINTF("\n");
      1X  14340 
      1X  14341       GDBG_PRINTF("Up to fifo wrap: \n");
      1X  14342       while(fifoPtr < gc->cmdTransportInfo.fifoShadowBase + (kDebugFifoSize >> 2)) 
      1X  14343         GDBG_PRINTF("0x%X\n", *fifoPtr++);
      1X  14344 #endif
      1X  14345 
      1X  14346       free(gc->cmdTransportInfo.fifoShadowBase);
      1X  14347     }
      1X  14348 #endif /* GLIDE_USE_SHADOW_FIFO */
      1X  14349   }
      1X  14350 #endif /* (GLIDE_PLATFORM & GLIDE_HW_CVG) && USE_PACKET_FIFO */
      1	  14351 
      1	  14352   gdbg_printf("ABNORMAL TERMINATION\n");
      1	  14353 
      1	  14354   exit(-1);
      1	  14355 
      1	  14356 } /* _grAssert */


Command Line
------- ----

CC/DEBUG/NOOP/LIST=[.OUT.DEBUG.OBJ.GLIDE.GLIDE2X.CVG.GLIDE.SRC]GERROR/OBJECT=[.
OUT.DEBUG.OBJ.GLIDE.GLIDE2X.CVG.GLIDE.SRC]GERROR.OBJ/INCLUDE_DIRECTORY=([.GLIDE
.SWLIBS.FXMISC],[.GLIDE.GLIDE2X.CVG.INCSRC],[.GLIDE.GLIDE2X.CVG.GLIDE.SRC],[.GL
IDE.GLIDE2X.CVG.INIT],[.GLIDE.SWLIBS.NEWPCI.PCILIB])/DEFINE=(CVG,GLIDE_USE_C_TR
ISETUP,GLIDE_HW_TRI_SETUP=1,GLIDE_TRI_CULLING=1,GLIDE_DEFAULT_GAMMA=1.3F,GLIDE_
LIB=1) [.GLIDE.GLIDE2X.CVG.GLIDE.SRC]GERROR.C

GERROR                          Source Listing                   9-MAY-2021 23:42:55  VSI C V7.4-002-50R2O              Page 6
V1.0                                                             2-FEB-2021 02:11:10  gerror.c;1

Hardware: /ARCHITECTURE=GENERIC /OPTIMIZE=TUNE=GENERIC
These macros are in effect at the start of the compilation.
----- ------ --- -- ------ -- --- ----- -- --- ------------

 __G_FLOAT=1  __DECC=1  vms=1  VMS=1  __32BITS=1  __PRAGMA_ENVIRONMENT=1 
 __CRTL_VER=80400000  __vms_version="V8.4-2L1"  CC$gfloat=1  __X_FLOAT=1 
 GLIDE_HW_TRI_SETUP=1  GLIDE_USE_C_TRISETUP=1  vms_version="V8.4-2L1" 
 __DATE__="May  9 2021"  __STDC_VERSION__=199901L  __DECC_MODE_RELAXED=1 
 __DECC_VER=70490002  __VMS=1  GLIDE_DEFAULT_GAMMA=1.3F  GLIDE_LIB=1 
 __ALPHA=1  VMS_VERSION="V8.4-2L1"  __IEEE_FLOAT=0  __VMS_VERSION="V8.4-2L1" 
 __TIME__="23:42:55"  __Alpha_AXP=1  __VMS_VER=80421222 
 __BIASED_FLT_ROUNDS=2  CVG=1  __INITIAL_POINTER_SIZE=0  __STDC__=2 
 __LANGUAGE_C__=1  __vms=1  __alpha=1  __D_FLOAT=0  GLIDE_TRI_CULLING=1 

