FXGLOB                          Source Listing                   9-MAY-2021 23:43:26  VSI C V7.4-002-50R2O              Page 1
V1.0                                                             8-MAY-2021 19:55:06  fxglob.c;2

	      1 /*
	      2 ** THIS SOFTWARE IS SUBJECT TO COPYRIGHT PROTECTION AND IS OFFERED ONLY
	      3 ** PURSUANT TO THE 3DFX GLIDE GENERAL PUBLIC LICENSE. THERE IS NO RIGHT
	      4 ** TO USE THE GLIDE TRADEMARK WITHOUT PRIOR WRITTEN PERMISSION OF 3DFX
	      5 ** INTERACTIVE, INC. A COPY OF THIS LICENSE MAY BE OBTAINED FROM THE 
	      6 ** DISTRIBUTOR OR BY CONTACTING 3DFX INTERACTIVE INC(info@3dfx.com). 
	      7 ** THIS PROGRAM IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER 
	      8 ** EXPRESSED OR IMPLIED. SEE THE 3DFX GLIDE GENERAL PUBLIC LICENSE FOR A
	      9 ** FULL TEXT OF THE NON-WARRANTY PROVISIONS.  
	     10 ** 
	     11 ** USE, DUPLICATION OR DISCLOSURE BY THE GOVERNMENT IS SUBJECT TO
	     12 ** RESTRICTIONS AS SET FORTH IN SUBDIVISION (C)(1)(II) OF THE RIGHTS IN
	     13 ** TECHNICAL DATA AND COMPUTER SOFTWARE CLAUSE AT DFARS 252.227-7013,
	     14 ** AND/OR IN SIMILAR OR SUCCESSOR CLAUSES IN THE FAR, DOD OR NASA FAR
	     15 ** SUPPLEMENT. UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT LAWS OF
	     16 ** THE UNITED STATES.  
	     17 ** 
	     18 ** COPYRIGHT 3DFX INTERACTIVE, INC. 1999, ALL RIGHTS RESERVED
	     19 */
	     20 
	     21 /*
	     22 	xnglob.c
	     23 
	     24 	The globulate function below takes an NT command line and expands
	     25 	wildcards according to POSIX.2 rules. It returns 0 on success, or -1
	     26 	on failure. The reason that *argv is always globbed on is to convert
	     27 	any backslashes in the program name to slashes. The deglobulate
	     28 	function below it merely frees the memory associated with the
	     29 	previously run globulate.
	     30 */
	     31 
	     32 int x;
	     33 
       X     34 #ifdef WIN32
       X     35 
       X     36 #include <windows.h>
       X     37 #include <stdlib.h>
       X     38 #include <string.h>
       X     39 #include <stdio.h>
       X     40 #include "glob.h"
       X     41 #include "fxglob.h"
       X     42 
       X     43 static signed int globulated_argi;
       X     44 signed int globulated_argc;
       X     45 char **globulated_argv;
       X     46 
       X     47 signed int globulate (signed int argi, signed int argc, char **argv)
       X     48 {
       X     49 	glob_t gl;
       X     50 	signed int ret, a;
       X     51 
       X     52 	if (argi <= 0 || argc < argi || argv == NULL || (ret = glob(*argv, GLOB_NOCHECK, NULL, &gl)) != 0)
       X     53 		ret = -1;
       X     54 	else
       X     55 	{
       X     56 		for (a = argi; a < argc; ++a)
       X     57 		{

FXGLOB                          Source Listing                   9-MAY-2021 23:43:26  VSI C V7.4-002-50R2O              Page 2
V1.0                                                             8-MAY-2021 19:55:06  fxglob.c;2

       X     58 			if ((ret = glob(argv[a], GLOB_NOCHECK|GLOB_APPEND|GLOB_SHQUOTE, NULL, &gl)) != 0)
       X     59 			{
       X     60 				ret = -1;
       X     61 				goto globfree_gl;
       X     62 			}
       X     63 		}
       X     64 		if ((globulated_argv = malloc((argi + gl.gl_pathc + 1) * sizeof *globulated_argv)) == NULL)
       X     65 		{
       X     66 			ret = -1;
       X     67 			goto globfree_gl;
       X     68 		}
       X     69 		if ((*globulated_argv = malloc(strlen(*(gl.gl_pathv)) + 1)) == NULL)
       X     70 		{
       X     71 			ret = -1;
       X     72 			goto globfree_gl;
       X     73 		}
       X     74 		(void) strcpy(*globulated_argv, *(gl.gl_pathv));
       X     75 		for (a = 1; a < argi; ++a)
       X     76 			globulated_argv[a] = argv[a];
       X     77 		globulated_argc = gl.gl_pathc - 1;
       X     78 		for (a = 0; a < globulated_argc; ++a)
       X     79 		{
       X     80 			if ((globulated_argv[a + argi] = malloc(strlen(gl.gl_pathv[a + 1]) + 1)) == NULL)
       X     81 			{
       X     82 				while (a--)
       X     83 					free(globulated_argv[a + argi]);
       X     84 				free(*globulated_argv);
       X     85 				ret = -1;
       X     86 				goto globfree_gl;
       X     87 			}
       X     88 			(void) strcpy(globulated_argv[a + argi], gl.gl_pathv[a + 1]);
       X     89 		}
       X     90 		globulated_argv[a + argi] = NULL;
       X     91 		globulated_argc += argi;
       X     92 		globulated_argi = argi;
       X     93 		ret = 0;
       X     94 globfree_gl:
       X     95 		globfree(&gl);
       X     96 	}
       X     97 	return ret;
       X     98 }
       X     99 
       X    100 void deglobulate (void)
       X    101 {
       X    102 	for (globulated_argi = globulated_argc - globulated_argi; globulated_argi--; )
       X    103 		free(globulated_argv[--globulated_argc]);
       X    104 	free(*globulated_argv);
       X    105 	free(globulated_argv);
       X    106 }
       X    107 
       X    108 static WIN32_FIND_DATA fdata;
       X    109 static int valid;
       X    110 
       X    111 // GMT: POSIX emulation routines
       X    112 HANDLE opendir(char *path)
       X    113 {
       X    114     HANDLE h;

FXGLOB                          Source Listing                   9-MAY-2021 23:43:26  VSI C V7.4-002-50R2O              Page 3
V1.0                                                             8-MAY-2021 19:55:06  fxglob.c;2

       X    115 
       X    116     h = FindFirstFile(path,&fdata);
       X    117     if (h == INVALID_HANDLE_VALUE) {
       X    118         printf("error: FindFirstFile failed - %d\n",GetLastError());
       X    119     }
       X    120     else valid = 1;
       X    121     return h;
       X    122 }
       X    123 
       X    124 char *readdir(HANDLE h)
       X    125 {
       X    126     if (!valid) {			// if no valid filename
       X    127     	if (!FindNextFile(h,&fdata))	// find the next one
       X    128 	    return 0;			// if none, return 0
       X    129     }
       X    130     valid = 0;
       X    131 	// !!!TURBO HACKLAND
       X    132 	strlwr( fdata.cFileName );
       X    133     return fdata.cFileName;
       X    134 }
       X    135 
       X    136 int closedir(HANDLE h)
       X    137 {
       X    138     int rv = FindClose(h);
       X    139     if (!rv)
       X    140     	printf("error: FindClose failed - %d\n",GetLastError());
       X    141     return rv;	
       X    142 }
       X    143 
       X    144 void fxGlobify( int *argc, char ***argv )
       X    145 {
       X    146 	// There's this upper/lower case pattern matching problem...
       X    147 	// !!!DANGER! FIRE-BREATHING ROBO-HACK
       X    148 	int index;
       X    149 	for( index = 1; index < *argc; index++ )
       X    150 	{
       X    151 		strlwr( (*argv)[index] );
       X    152 	}
       X    153 
       X    154 	if ( globulate( 1, *argc, *argv ) == 0 )
       X    155 	{
       X    156 		*argc = globulated_argc;
       X    157 		*argv = globulated_argv;
       X    158 	}
       X    159 }
       X    160 
       X    161 #endif


Command Line
------- ----

CC/DEBUG/NOOP/LIST=[.OUT.DEBUG.OBJ.GLIDE.SWLIBS.FXMISC]FXGLOB/OBJECT=[.OUT.DEBU
G.OBJ.GLIDE.SWLIBS.FXMISC]FXGLOB.OBJ/INCLUDE_DIRECTORY=([.GLIDE.SWLIBS.FXMISC],
[.GLIDE.GLIDE2X.CVG.INCSRC],[.GLIDE.GLIDE2X.CVG.GLIDE.SRC],[.GLIDE.GLIDE2X.CVG.
INIT],[.GLIDE.SWLIBS.NEWPCI.PCILIB])/DEFINE=(CVG,GLIDE_USE_C_TRISETUP,GLIDE_HW_
TRI_SETUP=1,GLIDE_TRI_CULLING=1,GLIDE_DEFAULT_GAMMA=1.3F,GLIDE_LIB=1) [.GLIDE.S

FXGLOB                          Source Listing                   9-MAY-2021 23:43:26  VSI C V7.4-002-50R2O              Page 4
V1.0                                                             8-MAY-2021 19:55:06  fxglob.c;2

WLIBS.FXMISC]FXGLOB.C

Hardware: /ARCHITECTURE=GENERIC /OPTIMIZE=TUNE=GENERIC

These macros are in effect at the start of the compilation.
----- ------ --- -- ------ -- --- ----- -- --- ------------

 __G_FLOAT=1  __DECC=1  vms=1  VMS=1  __32BITS=1  __PRAGMA_ENVIRONMENT=1 
 __CRTL_VER=80400000  __vms_version="V8.4-2L1"  CC$gfloat=1  __X_FLOAT=1 
 GLIDE_HW_TRI_SETUP=1  GLIDE_USE_C_TRISETUP=1  vms_version="V8.4-2L1" 
 __DATE__="May  9 2021"  __STDC_VERSION__=199901L  __DECC_MODE_RELAXED=1 
 __DECC_VER=70490002  __VMS=1  GLIDE_DEFAULT_GAMMA=1.3F  GLIDE_LIB=1 
 __ALPHA=1  VMS_VERSION="V8.4-2L1"  __IEEE_FLOAT=0  __VMS_VERSION="V8.4-2L1" 
 __TIME__="23:43:26"  __Alpha_AXP=1  __VMS_VER=80421222 
 __BIASED_FLT_ROUNDS=2  CVG=1  __INITIAL_POINTER_SIZE=0  __STDC__=2 
 __LANGUAGE_C__=1  __vms=1  __alpha=1  __D_FLOAT=0  GLIDE_TRI_CULLING=1 

